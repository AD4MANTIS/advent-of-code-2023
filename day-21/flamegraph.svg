<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="870" onload="init(evt)" viewBox="0 0 1200 870" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="870" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="853.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="853.00"> </text><svg id="frames" x="10" width="1180" total_samples="25147"><g><title>`0x7FFF38980E8B (6 samples, 0.02%)</title><rect x="0.0000%" y="725" width="0.0239%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="6"/><text x="0.2500%" y="735.50"></text></g><g><title>`0x7FFF389A5986 (10 samples, 0.04%)</title><rect x="0.0000%" y="773" width="0.0398%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="10"/><text x="0.2500%" y="783.50"></text></g><g><title>`0x7FFF389D23CA (10 samples, 0.04%)</title><rect x="0.0000%" y="757" width="0.0398%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="10"/><text x="0.2500%" y="767.50"></text></g><g><title>`0x7FFF38980DCB (10 samples, 0.04%)</title><rect x="0.0000%" y="741" width="0.0398%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="10"/><text x="0.2500%" y="751.50"></text></g><g><title>`0x7FFF38980F90 (4 samples, 0.02%)</title><rect x="0.0239%" y="725" width="0.0159%" height="15" fill="rgb(208,68,35)" fg:x="6" fg:w="4"/><text x="0.2739%" y="735.50"></text></g><g><title>`0x7FFF38980BC8 (3 samples, 0.01%)</title><rect x="0.0278%" y="709" width="0.0119%" height="15" fill="rgb(232,128,0)" fg:x="7" fg:w="3"/><text x="0.2778%" y="719.50"></text></g><g><title>`0x7FFF363FBAE8 (3 samples, 0.01%)</title><rect x="0.0398%" y="741" width="0.0119%" height="15" fill="rgb(207,160,47)" fg:x="10" fg:w="3"/><text x="0.2898%" y="751.50"></text></g><g><title>`0x7FFF36408F91 (3 samples, 0.01%)</title><rect x="0.0398%" y="725" width="0.0119%" height="15" fill="rgb(228,23,34)" fg:x="10" fg:w="3"/><text x="0.2898%" y="735.50"></text></g><g><title>`0x7FFF36401843 (3 samples, 0.01%)</title><rect x="0.0398%" y="709" width="0.0119%" height="15" fill="rgb(218,30,26)" fg:x="10" fg:w="3"/><text x="0.2898%" y="719.50"></text></g><g><title>`0x7FFF36056452 (3 samples, 0.01%)</title><rect x="0.0398%" y="693" width="0.0119%" height="15" fill="rgb(220,122,19)" fg:x="10" fg:w="3"/><text x="0.2898%" y="703.50"></text></g><g><title>`0x7FFF3899A25A (3 samples, 0.01%)</title><rect x="0.0398%" y="677" width="0.0119%" height="15" fill="rgb(250,228,42)" fg:x="10" fg:w="3"/><text x="0.2898%" y="687.50"></text></g><g><title>`0x7FFF38988CAC (3 samples, 0.01%)</title><rect x="0.0398%" y="661" width="0.0119%" height="15" fill="rgb(240,193,28)" fg:x="10" fg:w="3"/><text x="0.2898%" y="671.50"></text></g><g><title>`0x7FFF389988D4 (3 samples, 0.01%)</title><rect x="0.0398%" y="645" width="0.0119%" height="15" fill="rgb(216,20,37)" fg:x="10" fg:w="3"/><text x="0.2898%" y="655.50"></text></g><g><title>`0x7FFF38980EBF (3 samples, 0.01%)</title><rect x="0.0398%" y="629" width="0.0119%" height="15" fill="rgb(206,188,39)" fg:x="10" fg:w="3"/><text x="0.2898%" y="639.50"></text></g><g><title>`0x7FFF363FBCD9 (4 samples, 0.02%)</title><rect x="0.0398%" y="757" width="0.0159%" height="15" fill="rgb(217,207,13)" fg:x="10" fg:w="4"/><text x="0.2898%" y="767.50"></text></g><g><title>`0x7FFF389A9728 (31 samples, 0.12%)</title><rect x="3.0739%" y="517" width="0.1233%" height="15" fill="rgb(231,73,38)" fg:x="773" fg:w="31"/><text x="3.3239%" y="527.50"></text></g><g><title>`0x7FFF389B4B1B (31 samples, 0.12%)</title><rect x="3.0739%" y="501" width="0.1233%" height="15" fill="rgb(225,20,46)" fg:x="773" fg:w="31"/><text x="3.3239%" y="511.50"></text></g><g><title>`0x7FFF389B63FA (31 samples, 0.12%)</title><rect x="3.0739%" y="485" width="0.1233%" height="15" fill="rgb(210,31,41)" fg:x="773" fg:w="31"/><text x="3.3239%" y="495.50"></text></g><g><title>`0x7FFF389B64A8 (31 samples, 0.12%)</title><rect x="3.0739%" y="469" width="0.1233%" height="15" fill="rgb(221,200,47)" fg:x="773" fg:w="31"/><text x="3.3239%" y="479.50"></text></g><g><title>`0x7FFF389B65E6 (31 samples, 0.12%)</title><rect x="3.0739%" y="453" width="0.1233%" height="15" fill="rgb(226,26,5)" fg:x="773" fg:w="31"/><text x="3.3239%" y="463.50"></text></g><g><title>`0x7FFF38A0F734 (31 samples, 0.12%)</title><rect x="3.0739%" y="437" width="0.1233%" height="15" fill="rgb(249,33,26)" fg:x="773" fg:w="31"/><text x="3.3239%" y="447.50"></text></g><g><title>`0x7FFF389A9C2C (201 samples, 0.80%)</title><rect x="3.2012%" y="517" width="0.7993%" height="15" fill="rgb(235,183,28)" fg:x="805" fg:w="201"/><text x="3.4512%" y="527.50"></text></g><g><title>`0x7FFF389B65E6 (201 samples, 0.80%)</title><rect x="3.2012%" y="501" width="0.7993%" height="15" fill="rgb(221,5,38)" fg:x="805" fg:w="201"/><text x="3.4512%" y="511.50"></text></g><g><title>`0x7FFF38A0F734 (201 samples, 0.80%)</title><rect x="3.2012%" y="485" width="0.7993%" height="15" fill="rgb(247,18,42)" fg:x="805" fg:w="201"/><text x="3.4512%" y="495.50"></text></g><g><title>`0x7FFF389AAB11 (234 samples, 0.93%)</title><rect x="3.0739%" y="549" width="0.9305%" height="15" fill="rgb(241,131,45)" fg:x="773" fg:w="234"/><text x="3.3239%" y="559.50"></text></g><g><title>`0x7FFF389ABE44 (234 samples, 0.93%)</title><rect x="3.0739%" y="533" width="0.9305%" height="15" fill="rgb(249,31,29)" fg:x="773" fg:w="234"/><text x="3.3239%" y="543.50"></text></g><g><title>part2.exe`ahash::hash_set::impl$14::from_iter (3 samples, 0.01%)</title><rect x="4.0045%" y="549" width="0.0119%" height="15" fill="rgb(225,111,53)" fg:x="1007" fg:w="3"/><text x="4.2545%" y="559.50"></text></g><g><title>part2.exe`ahash::random_state::RandomState::new (3 samples, 0.01%)</title><rect x="4.0045%" y="533" width="0.0119%" height="15" fill="rgb(238,160,17)" fg:x="1007" fg:w="3"/><text x="4.2545%" y="543.50"></text></g><g><title>part2.exe`once_cell::race::once_box::OnceBox&lt;array$&lt;array$&lt;u64,4&gt;,2&gt; &gt;::get_or_try_init&lt;array$&lt;array$&lt;u64,4&gt;,2&gt;,once_cell::race::once_box::impl$3::get_or_init::closure_env$0&lt;array$&lt;array$&lt;u64,4&gt;,2&gt;,ahash::random_state::get_fixed_seeds::closure_env$0&gt;,enum2$&lt;once_cell::race::once_box::impl$3::get_or_init::Void&gt; &gt;(once_cell::race::once_box::impl$3::get_or_init::closure_env$0&lt;array$&lt;array$ (3 samples, 0.01%)</title><rect x="4.0045%" y="517" width="0.0119%" height="15" fill="rgb(214,148,48)" fg:x="1007" fg:w="3"/><text x="4.2545%" y="527.50"></text></g><g><title>part2.exe`once_cell::race::once_box::impl$3::get_or_init::closure$0(once_cell::race::once_box::impl$3::get_or_init::closure_env$0&lt;array$&lt;array$ (3 samples, 0.01%)</title><rect x="4.0045%" y="501" width="0.0119%" height="15" fill="rgb(232,36,49)" fg:x="1007" fg:w="3"/><text x="4.2545%" y="511.50"></text></g><g><title>part2.exe`ahash::random_state::get_fixed_seeds::closure$0 (3 samples, 0.01%)</title><rect x="4.0045%" y="485" width="0.0119%" height="15" fill="rgb(209,103,24)" fg:x="1007" fg:w="3"/><text x="4.2545%" y="495.50"></text></g><g><title>part2.exe`enum2$&lt;core::result::Result&lt;tuple$&lt;&gt;,getrandom::error::Error&gt; &gt;::expect(enum2$&lt;core::result::Result&lt;tuple$&lt;&gt;,getrandom::error::Error&gt; &gt;, ref$ (3 samples, 0.01%)</title><rect x="4.0045%" y="469" width="0.0119%" height="15" fill="rgb(229,88,8)" fg:x="1007" fg:w="3"/><text x="4.2545%" y="479.50"></text></g><g><title>part2.exe`getrandom::imp::getrandom_inner(ref_mut$&lt;slice2$&lt;core::mem::maybe_uninit::MaybeUninit (3 samples, 0.01%)</title><rect x="4.0045%" y="453" width="0.0119%" height="15" fill="rgb(213,181,19)" fg:x="1007" fg:w="3"/><text x="4.2545%" y="463.50"></text></g><g><title>`0x7FFF3564177C (3 samples, 0.01%)</title><rect x="4.0045%" y="437" width="0.0119%" height="15" fill="rgb(254,191,54)" fg:x="1007" fg:w="3"/><text x="4.2545%" y="447.50"></text></g><g><title>`0x7FFF356418D6 (3 samples, 0.01%)</title><rect x="4.0045%" y="421" width="0.0119%" height="15" fill="rgb(241,83,37)" fg:x="1007" fg:w="3"/><text x="4.2545%" y="431.50"></text></g><g><title>`0x7FFF356455D3 (3 samples, 0.01%)</title><rect x="4.0045%" y="405" width="0.0119%" height="15" fill="rgb(233,36,39)" fg:x="1007" fg:w="3"/><text x="4.2545%" y="415.50"></text></g><g><title>`0x7FFF35647969 (3 samples, 0.01%)</title><rect x="4.0045%" y="389" width="0.0119%" height="15" fill="rgb(226,3,54)" fg:x="1007" fg:w="3"/><text x="4.2545%" y="399.50"></text></g><g><title>`0x7FFF35647E85 (3 samples, 0.01%)</title><rect x="4.0045%" y="373" width="0.0119%" height="15" fill="rgb(245,192,40)" fg:x="1007" fg:w="3"/><text x="4.2545%" y="383.50"></text></g><g><title>`0x7FFF36056452 (3 samples, 0.01%)</title><rect x="4.0045%" y="357" width="0.0119%" height="15" fill="rgb(238,167,29)" fg:x="1007" fg:w="3"/><text x="4.2545%" y="367.50"></text></g><g><title>`0x7FFF3899A25A (3 samples, 0.01%)</title><rect x="4.0045%" y="341" width="0.0119%" height="15" fill="rgb(232,182,51)" fg:x="1007" fg:w="3"/><text x="4.2545%" y="351.50"></text></g><g><title>`0x7FFF38988CAC (3 samples, 0.01%)</title><rect x="4.0045%" y="325" width="0.0119%" height="15" fill="rgb(231,60,39)" fg:x="1007" fg:w="3"/><text x="4.2545%" y="335.50"></text></g><g><title>`0x7FFF389B1441 (10 samples, 0.04%)</title><rect x="4.0601%" y="261" width="0.0398%" height="15" fill="rgb(208,69,12)" fg:x="1021" fg:w="10"/><text x="4.3101%" y="271.50"></text></g><g><title>part2.exe`alloc::vec::Vec&lt;char,alloc::alloc::Global&gt;::with_capacity_in (23 samples, 0.09%)</title><rect x="4.0243%" y="341" width="0.0915%" height="15" fill="rgb(235,93,37)" fg:x="1012" fg:w="23"/><text x="4.2743%" y="351.50"></text></g><g><title>part2.exe`alloc::raw_vec::RawVec&lt;char,alloc::alloc::Global&gt;::with_capacity_in (23 samples, 0.09%)</title><rect x="4.0243%" y="325" width="0.0915%" height="15" fill="rgb(213,116,39)" fg:x="1012" fg:w="23"/><text x="4.2743%" y="335.50"></text></g><g><title>part2.exe`alloc::raw_vec::RawVec&lt;char,alloc::alloc::Global&gt;::allocate_in (23 samples, 0.09%)</title><rect x="4.0243%" y="309" width="0.0915%" height="15" fill="rgb(222,207,29)" fg:x="1012" fg:w="23"/><text x="4.2743%" y="319.50"></text></g><g><title>`0x7FFF389AC7BA (23 samples, 0.09%)</title><rect x="4.0243%" y="293" width="0.0915%" height="15" fill="rgb(206,96,30)" fg:x="1012" fg:w="23"/><text x="4.2743%" y="303.50"></text></g><g><title>`0x7FFF389AD6DF (14 samples, 0.06%)</title><rect x="4.0601%" y="277" width="0.0557%" height="15" fill="rgb(218,138,4)" fg:x="1021" fg:w="14"/><text x="4.3101%" y="287.50"></text></g><g><title>`0x7FFF389B1444 (4 samples, 0.02%)</title><rect x="4.0999%" y="261" width="0.0159%" height="15" fill="rgb(250,191,14)" fg:x="1031" fg:w="4"/><text x="4.3499%" y="271.50"></text></g><g><title>part2.exe`alloc::vec::Vec&lt;alloc::vec::Vec&lt;char,alloc::alloc::Global&gt;,alloc::alloc::Global&gt;::append(alloc::vec::Vec&lt;alloc::vec::Vec (27 samples, 0.11%)</title><rect x="4.0164%" y="549" width="0.1074%" height="15" fill="rgb(239,60,40)" fg:x="1010" fg:w="27"/><text x="4.2664%" y="559.50"></text></g><g><title>part2.exe`alloc::vec::Vec&lt;alloc::vec::Vec&lt;char,alloc::alloc::Global&gt;,alloc::alloc::Global&gt;::as_slice (27 samples, 0.11%)</title><rect x="4.0164%" y="533" width="0.1074%" height="15" fill="rgb(206,27,48)" fg:x="1010" fg:w="27"/><text x="4.2664%" y="543.50"></text></g><g><title>part2.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;alloc::vec::Vec (26 samples, 0.10%)</title><rect x="4.0204%" y="517" width="0.1034%" height="15" fill="rgb(225,35,8)" fg:x="1011" fg:w="26"/><text x="4.2704%" y="527.50"></text></g><g><title>part2.exe`alloc::vec::Vec&lt;alloc::vec::Vec&lt;char,alloc::alloc::Global&gt;,alloc::alloc::Global&gt;::as_ptr (26 samples, 0.10%)</title><rect x="4.0204%" y="501" width="0.1034%" height="15" fill="rgb(250,213,24)" fg:x="1011" fg:w="26"/><text x="4.2704%" y="511.50"></text></g><g><title>part2.exe`alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;char,alloc::alloc::Global&gt;,alloc::alloc::Global&gt;::ptr (26 samples, 0.10%)</title><rect x="4.0204%" y="485" width="0.1034%" height="15" fill="rgb(247,123,22)" fg:x="1011" fg:w="26"/><text x="4.2704%" y="495.50"></text></g><g><title>part2.exe`alloc::vec::impl$10::clone&lt;alloc::vec::Vec&lt;char,alloc::alloc::Global&gt;,alloc::alloc::Global&gt;(alloc::vec::Vec&lt;alloc::vec::Vec (26 samples, 0.10%)</title><rect x="4.0204%" y="469" width="0.1034%" height="15" fill="rgb(231,138,38)" fg:x="1011" fg:w="26"/><text x="4.2704%" y="479.50"></text></g><g><title>part2.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;alloc::vec::Vec (26 samples, 0.10%)</title><rect x="4.0204%" y="453" width="0.1034%" height="15" fill="rgb(231,145,46)" fg:x="1011" fg:w="26"/><text x="4.2704%" y="463.50"></text></g><g><title>part2.exe`alloc::slice::hack::to_vec(ref$&lt;slice2$&lt;alloc::vec::Vec (26 samples, 0.10%)</title><rect x="4.0204%" y="437" width="0.1034%" height="15" fill="rgb(251,118,11)" fg:x="1011" fg:w="26"/><text x="4.2704%" y="447.50"></text></g><g><title>part2.exe`alloc::slice::hack::impl$0::to_vec(ref$&lt;slice2$&lt;alloc::vec::Vec (26 samples, 0.10%)</title><rect x="4.0204%" y="421" width="0.1034%" height="15" fill="rgb(217,147,25)" fg:x="1011" fg:w="26"/><text x="4.2704%" y="431.50"></text></g><g><title>part2.exe`alloc::vec::impl$10::clone(alloc::vec::Vec (25 samples, 0.10%)</title><rect x="4.0243%" y="405" width="0.0994%" height="15" fill="rgb(247,81,37)" fg:x="1012" fg:w="25"/><text x="4.2743%" y="415.50"></text></g><g><title>part2.exe`alloc::slice::impl$0::to_vec_in(ref$&lt;slice2$ (25 samples, 0.10%)</title><rect x="4.0243%" y="389" width="0.0994%" height="15" fill="rgb(209,12,38)" fg:x="1012" fg:w="25"/><text x="4.2743%" y="399.50"></text></g><g><title>part2.exe`alloc::slice::hack::to_vec(ref$&lt;slice2$ (25 samples, 0.10%)</title><rect x="4.0243%" y="373" width="0.0994%" height="15" fill="rgb(227,1,9)" fg:x="1012" fg:w="25"/><text x="4.2743%" y="383.50"></text></g><g><title>part2.exe`alloc::slice::hack::impl$1::to_vec(ref$&lt;slice2$ (25 samples, 0.10%)</title><rect x="4.0243%" y="357" width="0.0994%" height="15" fill="rgb(248,47,43)" fg:x="1012" fg:w="25"/><text x="4.2743%" y="367.50"></text></g><g><title>part2.exe`alloc::raw_vec::RawVec&lt;usize,alloc::alloc::Global&gt;::capacity (150 samples, 0.60%)</title><rect x="5.3008%" y="533" width="0.5965%" height="15" fill="rgb(221,10,30)" fg:x="1333" fg:w="150"/><text x="5.5508%" y="543.50"></text></g><g><title>`0x7FFF389F26E2 (8 samples, 0.03%)</title><rect x="5.9212%" y="373" width="0.0318%" height="15" fill="rgb(210,229,1)" fg:x="1489" fg:w="8"/><text x="6.1712%" y="383.50"></text></g><g><title>`0x7FFF38A0F674 (8 samples, 0.03%)</title><rect x="5.9212%" y="357" width="0.0318%" height="15" fill="rgb(222,148,37)" fg:x="1489" fg:w="8"/><text x="6.1712%" y="367.50"></text></g><g><title>`0x7FFF389F26FF (3 samples, 0.01%)</title><rect x="5.9530%" y="373" width="0.0119%" height="15" fill="rgb(234,67,33)" fg:x="1497" fg:w="3"/><text x="6.2030%" y="383.50"></text></g><g><title>`0x7FFF389B65E6 (3 samples, 0.01%)</title><rect x="5.9530%" y="357" width="0.0119%" height="15" fill="rgb(247,98,35)" fg:x="1497" fg:w="3"/><text x="6.2030%" y="367.50"></text></g><g><title>`0x7FFF38A0F734 (3 samples, 0.01%)</title><rect x="5.9530%" y="341" width="0.0119%" height="15" fill="rgb(247,138,52)" fg:x="1497" fg:w="3"/><text x="6.2030%" y="351.50"></text></g><g><title>`0x7FFF389AFBD4 (27 samples, 0.11%)</title><rect x="5.9212%" y="389" width="0.1074%" height="15" fill="rgb(213,79,30)" fg:x="1489" fg:w="27"/><text x="6.1712%" y="399.50"></text></g><g><title>`0x7FFF389F272F (16 samples, 0.06%)</title><rect x="5.9649%" y="373" width="0.0636%" height="15" fill="rgb(246,177,23)" fg:x="1500" fg:w="16"/><text x="6.2149%" y="383.50"></text></g><g><title>`0x7FFF389B65E6 (16 samples, 0.06%)</title><rect x="5.9649%" y="357" width="0.0636%" height="15" fill="rgb(230,62,27)" fg:x="1500" fg:w="16"/><text x="6.2149%" y="367.50"></text></g><g><title>`0x7FFF38A0F734 (16 samples, 0.06%)</title><rect x="5.9649%" y="341" width="0.0636%" height="15" fill="rgb(216,154,8)" fg:x="1500" fg:w="16"/><text x="6.2149%" y="351.50"></text></g><g><title>`0x7FFF389B24DF (35 samples, 0.14%)</title><rect x="5.9013%" y="421" width="0.1392%" height="15" fill="rgb(244,35,45)" fg:x="1484" fg:w="35"/><text x="6.1513%" y="431.50"></text></g><g><title>`0x7FFF389ACD59 (35 samples, 0.14%)</title><rect x="5.9013%" y="405" width="0.1392%" height="15" fill="rgb(251,115,12)" fg:x="1484" fg:w="35"/><text x="6.1513%" y="415.50"></text></g><g><title>`0x7FFF38A16013 (6 samples, 0.02%)</title><rect x="6.0484%" y="405" width="0.0239%" height="15" fill="rgb(240,54,50)" fg:x="1521" fg:w="6"/><text x="6.2984%" y="415.50"></text></g><g><title>`0x7FFF38A16026 (4 samples, 0.02%)</title><rect x="6.0922%" y="405" width="0.0159%" height="15" fill="rgb(233,84,52)" fg:x="1532" fg:w="4"/><text x="6.3422%" y="415.50"></text></g><g><title>`0x7FFF38A160C4 (6 samples, 0.02%)</title><rect x="6.1160%" y="405" width="0.0239%" height="15" fill="rgb(207,117,47)" fg:x="1538" fg:w="6"/><text x="6.3660%" y="415.50"></text></g><g><title>`0x7FFF38A160CE (11 samples, 0.04%)</title><rect x="6.1399%" y="405" width="0.0437%" height="15" fill="rgb(249,43,39)" fg:x="1544" fg:w="11"/><text x="6.3899%" y="415.50"></text></g><g><title>`0x7FFF38A160D3 (402 samples, 1.60%)</title><rect x="6.1836%" y="405" width="1.5986%" height="15" fill="rgb(209,38,44)" fg:x="1555" fg:w="402"/><text x="6.4336%" y="415.50"></text></g><g><title>`0x7FFF38A160D7 (349 samples, 1.39%)</title><rect x="7.7822%" y="405" width="1.3878%" height="15" fill="rgb(236,212,23)" fg:x="1957" fg:w="349"/><text x="8.0322%" y="415.50"></text></g><g><title>`0x7FFF38A160DB (6 samples, 0.02%)</title><rect x="9.1701%" y="405" width="0.0239%" height="15" fill="rgb(242,79,21)" fg:x="2306" fg:w="6"/><text x="9.4201%" y="415.50"></text></g><g><title>`0x7FFF38A160E7 (25 samples, 0.10%)</title><rect x="9.1939%" y="405" width="0.0994%" height="15" fill="rgb(211,96,35)" fg:x="2312" fg:w="25"/><text x="9.4439%" y="415.50"></text></g><g><title>`0x7FFF38A160EB (74 samples, 0.29%)</title><rect x="9.2934%" y="405" width="0.2943%" height="15" fill="rgb(253,215,40)" fg:x="2337" fg:w="74"/><text x="9.5434%" y="415.50"></text></g><g><title>`0x7FFF38A160EF (40 samples, 0.16%)</title><rect x="9.5876%" y="405" width="0.1591%" height="15" fill="rgb(211,81,21)" fg:x="2411" fg:w="40"/><text x="9.8376%" y="415.50"></text></g><g><title>`0x7FFF389B261E (933 samples, 3.71%)</title><rect x="6.0405%" y="421" width="3.7102%" height="15" fill="rgb(208,190,38)" fg:x="1519" fg:w="933"/><text x="6.2905%" y="431.50">`0x7..</text></g><g><title>`0x7FFF389A9728 (13 samples, 0.05%)</title><rect x="9.7507%" y="373" width="0.0517%" height="15" fill="rgb(235,213,38)" fg:x="2452" fg:w="13"/><text x="10.0007%" y="383.50"></text></g><g><title>`0x7FFF389B4B1B (13 samples, 0.05%)</title><rect x="9.7507%" y="357" width="0.0517%" height="15" fill="rgb(237,122,38)" fg:x="2452" fg:w="13"/><text x="10.0007%" y="367.50"></text></g><g><title>`0x7FFF389B63FA (12 samples, 0.05%)</title><rect x="9.7546%" y="341" width="0.0477%" height="15" fill="rgb(244,218,35)" fg:x="2453" fg:w="12"/><text x="10.0046%" y="351.50"></text></g><g><title>`0x7FFF389B64A8 (12 samples, 0.05%)</title><rect x="9.7546%" y="325" width="0.0477%" height="15" fill="rgb(240,68,47)" fg:x="2453" fg:w="12"/><text x="10.0046%" y="335.50"></text></g><g><title>`0x7FFF389B65E6 (12 samples, 0.05%)</title><rect x="9.7546%" y="309" width="0.0477%" height="15" fill="rgb(210,16,53)" fg:x="2453" fg:w="12"/><text x="10.0046%" y="319.50"></text></g><g><title>`0x7FFF38A0F734 (12 samples, 0.05%)</title><rect x="9.7546%" y="293" width="0.0477%" height="15" fill="rgb(235,124,12)" fg:x="2453" fg:w="12"/><text x="10.0046%" y="303.50"></text></g><g><title>`0x7FFF389B1DE7 (1,103 samples, 4.39%)</title><rect x="5.9013%" y="437" width="4.3862%" height="15" fill="rgb(224,169,11)" fg:x="1484" fg:w="1103"/><text x="6.1513%" y="447.50">`0x7F..</text></g><g><title>`0x7FFF389B2631 (135 samples, 0.54%)</title><rect x="9.7507%" y="421" width="0.5368%" height="15" fill="rgb(250,166,2)" fg:x="2452" fg:w="135"/><text x="10.0007%" y="431.50"></text></g><g><title>`0x7FFF389AAB11 (135 samples, 0.54%)</title><rect x="9.7507%" y="405" width="0.5368%" height="15" fill="rgb(242,216,29)" fg:x="2452" fg:w="135"/><text x="10.0007%" y="415.50"></text></g><g><title>`0x7FFF389ABE44 (135 samples, 0.54%)</title><rect x="9.7507%" y="389" width="0.5368%" height="15" fill="rgb(230,116,27)" fg:x="2452" fg:w="135"/><text x="10.0007%" y="399.50"></text></g><g><title>`0x7FFF389A9C2C (120 samples, 0.48%)</title><rect x="9.8103%" y="373" width="0.4772%" height="15" fill="rgb(228,99,48)" fg:x="2467" fg:w="120"/><text x="10.0603%" y="383.50"></text></g><g><title>`0x7FFF389B65E6 (120 samples, 0.48%)</title><rect x="9.8103%" y="357" width="0.4772%" height="15" fill="rgb(253,11,6)" fg:x="2467" fg:w="120"/><text x="10.0603%" y="367.50"></text></g><g><title>`0x7FFF38A0F734 (120 samples, 0.48%)</title><rect x="9.8103%" y="341" width="0.4772%" height="15" fill="rgb(247,143,39)" fg:x="2467" fg:w="120"/><text x="10.0603%" y="351.50"></text></g><g><title>`0x7FFF389B1CAA (1,105 samples, 4.39%)</title><rect x="5.9013%" y="453" width="4.3942%" height="15" fill="rgb(236,97,10)" fg:x="1484" fg:w="1105"/><text x="6.1513%" y="463.50">`0x7F..</text></g><g><title>part2.exe`alloc::raw_vec::RawVec&lt;usize,alloc::alloc::Global&gt;::reserve_for_push&lt;usize,alloc::alloc::Global&gt; (1,107 samples, 4.40%)</title><rect x="5.8973%" y="533" width="4.4021%" height="15" fill="rgb(233,208,19)" fg:x="1483" fg:w="1107"/><text x="6.1473%" y="543.50">part2..</text></g><g><title>part2.exe`alloc::raw_vec::RawVec&lt;usize,alloc::alloc::Global&gt;::grow_amortized (1,107 samples, 4.40%)</title><rect x="5.8973%" y="517" width="4.4021%" height="15" fill="rgb(216,164,2)" fg:x="1483" fg:w="1107"/><text x="6.1473%" y="527.50">part2..</text></g><g><title>part2.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (1,107 samples, 4.40%)</title><rect x="5.8973%" y="501" width="4.4021%" height="15" fill="rgb(220,129,5)" fg:x="1483" fg:w="1107"/><text x="6.1473%" y="511.50">part2..</text></g><g><title>part2.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(enum2$&lt;core::result::Result&lt;core::alloc::layout::Layout,core::alloc::layout::LayoutError&gt; &gt;, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (1,107 samples, 4.40%)</title><rect x="5.8973%" y="485" width="4.4021%" height="15" fill="rgb(242,17,10)" fg:x="1483" fg:w="1107"/><text x="6.1473%" y="495.50">part2..</text></g><g><title>part2.exe`enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;::map_err(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;, alloc::raw_vec::finish_grow::closure_env$1 (1,107 samples, 4.40%)</title><rect x="5.8973%" y="469" width="4.4021%" height="15" fill="rgb(242,107,0)" fg:x="1483" fg:w="1107"/><text x="6.1473%" y="479.50">part2..</text></g><g><title>part2.exe`alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;::push (1,998 samples, 7.95%)</title><rect x="4.1238%" y="549" width="7.9453%" height="15" fill="rgb(251,28,31)" fg:x="1037" fg:w="1998"/><text x="4.3738%" y="559.50">part2.exe`a..</text></g><g><title>part2.exe`core::ptr::write (445 samples, 1.77%)</title><rect x="10.2994%" y="533" width="1.7696%" height="15" fill="rgb(233,223,10)" fg:x="2590" fg:w="445"/><text x="10.5494%" y="543.50"></text></g><g><title>`0x7FFF389AF153 (4 samples, 0.02%)</title><rect x="12.0690%" y="421" width="0.0159%" height="15" fill="rgb(215,21,27)" fg:x="3035" fg:w="4"/><text x="12.3190%" y="431.50"></text></g><g><title>`0x7FFF389F26E2 (4 samples, 0.02%)</title><rect x="12.0929%" y="405" width="0.0159%" height="15" fill="rgb(232,23,21)" fg:x="3041" fg:w="4"/><text x="12.3429%" y="415.50"></text></g><g><title>`0x7FFF38A0F674 (4 samples, 0.02%)</title><rect x="12.0929%" y="389" width="0.0159%" height="15" fill="rgb(244,5,23)" fg:x="3041" fg:w="4"/><text x="12.3429%" y="399.50"></text></g><g><title>`0x7FFF389AFBD4 (8 samples, 0.03%)</title><rect x="12.0929%" y="421" width="0.0318%" height="15" fill="rgb(226,81,46)" fg:x="3041" fg:w="8"/><text x="12.3429%" y="431.50"></text></g><g><title>part2.exe`alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;::with_capacity (17 samples, 0.07%)</title><rect x="12.0690%" y="549" width="0.0676%" height="15" fill="rgb(247,70,30)" fg:x="3035" fg:w="17"/><text x="12.3190%" y="559.50"></text></g><g><title>part2.exe`alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;::with_capacity_in (17 samples, 0.07%)</title><rect x="12.0690%" y="533" width="0.0676%" height="15" fill="rgb(212,68,19)" fg:x="3035" fg:w="17"/><text x="12.3190%" y="543.50"></text></g><g><title>part2.exe`alloc::raw_vec::RawVec&lt;usize,alloc::alloc::Global&gt;::with_capacity_in (17 samples, 0.07%)</title><rect x="12.0690%" y="517" width="0.0676%" height="15" fill="rgb(240,187,13)" fg:x="3035" fg:w="17"/><text x="12.3190%" y="527.50"></text></g><g><title>part2.exe`alloc::raw_vec::RawVec&lt;usize,alloc::alloc::Global&gt;::allocate_in (17 samples, 0.07%)</title><rect x="12.0690%" y="501" width="0.0676%" height="15" fill="rgb(223,113,26)" fg:x="3035" fg:w="17"/><text x="12.3190%" y="511.50"></text></g><g><title>part2.exe`alloc::alloc::impl$1::allocate (17 samples, 0.07%)</title><rect x="12.0690%" y="485" width="0.0676%" height="15" fill="rgb(206,192,2)" fg:x="3035" fg:w="17"/><text x="12.3190%" y="495.50"></text></g><g><title>part2.exe`alloc::alloc::Global::alloc_impl (17 samples, 0.07%)</title><rect x="12.0690%" y="469" width="0.0676%" height="15" fill="rgb(241,108,4)" fg:x="3035" fg:w="17"/><text x="12.3190%" y="479.50"></text></g><g><title>part2.exe`alloc::alloc::alloc (17 samples, 0.07%)</title><rect x="12.0690%" y="453" width="0.0676%" height="15" fill="rgb(247,173,49)" fg:x="3035" fg:w="17"/><text x="12.3190%" y="463.50"></text></g><g><title>`0x7FFF389ACD59 (17 samples, 0.07%)</title><rect x="12.0690%" y="437" width="0.0676%" height="15" fill="rgb(224,114,35)" fg:x="3035" fg:w="17"/><text x="12.3190%" y="447.50"></text></g><g><title>`0x7FFF389AFBF6 (3 samples, 0.01%)</title><rect x="12.1247%" y="421" width="0.0119%" height="15" fill="rgb(245,159,27)" fg:x="3049" fg:w="3"/><text x="12.3747%" y="431.50"></text></g><g><title>part2.exe`alloc::vec::Vec&lt;char,alloc::alloc::Global&gt;::extend_from_slice(ref$&lt;slice2$ (781 samples, 3.11%)</title><rect x="12.1366%" y="453" width="3.1057%" height="15" fill="rgb(245,172,44)" fg:x="3052" fg:w="781"/><text x="12.3866%" y="463.50">par..</text></g><g><title>part2.exe`alloc::vec::spec_extend::impl$4::spec_extend(alloc::vec::Vec&lt;char,alloc::alloc::Global&gt;*, core::slice::iter::Iter (781 samples, 3.11%)</title><rect x="12.1366%" y="437" width="3.1057%" height="15" fill="rgb(236,23,11)" fg:x="3052" fg:w="781"/><text x="12.3866%" y="447.50">par..</text></g><g><title>part2.exe`alloc::vec::Vec&lt;char,alloc::alloc::Global&gt;::append_elements(ptr_const$&lt;slice2$ (781 samples, 3.11%)</title><rect x="12.1366%" y="421" width="3.1057%" height="15" fill="rgb(205,117,38)" fg:x="3052" fg:w="781"/><text x="12.3866%" y="431.50">par..</text></g><g><title>`0x7FFF2F7D12FB (781 samples, 3.11%)</title><rect x="12.1366%" y="405" width="3.1057%" height="15" fill="rgb(237,72,25)" fg:x="3052" fg:w="781"/><text x="12.3866%" y="415.50">`0x..</text></g><g><title>part2.exe`alloc::slice::impl$0::concat(ref$&lt;slice2$&lt;alloc::vec::Vec (782 samples, 3.11%)</title><rect x="12.1366%" y="485" width="3.1097%" height="15" fill="rgb(244,70,9)" fg:x="3052" fg:w="782"/><text x="12.3866%" y="495.50">par..</text></g><g><title>part2.exe`alloc::slice::impl$2::concat(ref$&lt;slice2$&lt;alloc::vec::Vec (782 samples, 3.11%)</title><rect x="12.1366%" y="469" width="3.1097%" height="15" fill="rgb(217,125,39)" fg:x="3052" fg:w="782"/><text x="12.3866%" y="479.50">par..</text></g><g><title>`0x7FFF389B4370 (5 samples, 0.02%)</title><rect x="15.2464%" y="277" width="0.0199%" height="15" fill="rgb(235,36,10)" fg:x="3834" fg:w="5"/><text x="15.4964%" y="287.50"></text></g><g><title>`0x7FFF389B423A (5 samples, 0.02%)</title><rect x="15.2464%" y="261" width="0.0199%" height="15" fill="rgb(251,123,47)" fg:x="3834" fg:w="5"/><text x="15.4964%" y="271.50"></text></g><g><title>`0x7FFF389B4AB9 (6 samples, 0.02%)</title><rect x="15.2464%" y="293" width="0.0239%" height="15" fill="rgb(221,13,13)" fg:x="3834" fg:w="6"/><text x="15.4964%" y="303.50"></text></g><g><title>`0x7FFF389B4B1B (51 samples, 0.20%)</title><rect x="15.2702%" y="293" width="0.2028%" height="15" fill="rgb(238,131,9)" fg:x="3840" fg:w="51"/><text x="15.5202%" y="303.50"></text></g><g><title>`0x7FFF389B63FA (50 samples, 0.20%)</title><rect x="15.2742%" y="277" width="0.1988%" height="15" fill="rgb(211,50,8)" fg:x="3841" fg:w="50"/><text x="15.5242%" y="287.50"></text></g><g><title>`0x7FFF389B64A8 (50 samples, 0.20%)</title><rect x="15.2742%" y="261" width="0.1988%" height="15" fill="rgb(245,182,24)" fg:x="3841" fg:w="50"/><text x="15.5242%" y="271.50"></text></g><g><title>`0x7FFF389B65E6 (50 samples, 0.20%)</title><rect x="15.2742%" y="245" width="0.1988%" height="15" fill="rgb(242,14,37)" fg:x="3841" fg:w="50"/><text x="15.5242%" y="255.50"></text></g><g><title>`0x7FFF38A0F734 (50 samples, 0.20%)</title><rect x="15.2742%" y="229" width="0.1988%" height="15" fill="rgb(246,228,12)" fg:x="3841" fg:w="50"/><text x="15.5242%" y="239.50"></text></g><g><title>`0x7FFF389B4C0C (19 samples, 0.08%)</title><rect x="15.4770%" y="293" width="0.0756%" height="15" fill="rgb(213,55,15)" fg:x="3892" fg:w="19"/><text x="15.7270%" y="303.50"></text></g><g><title>`0x7FFF389B65E6 (19 samples, 0.08%)</title><rect x="15.4770%" y="277" width="0.0756%" height="15" fill="rgb(209,9,3)" fg:x="3892" fg:w="19"/><text x="15.7270%" y="287.50"></text></g><g><title>`0x7FFF38A0F734 (19 samples, 0.08%)</title><rect x="15.4770%" y="261" width="0.0756%" height="15" fill="rgb(230,59,30)" fg:x="3892" fg:w="19"/><text x="15.7270%" y="271.50"></text></g><g><title>`0x7FFF389B4E66 (238 samples, 0.95%)</title><rect x="15.5526%" y="293" width="0.9464%" height="15" fill="rgb(209,121,21)" fg:x="3911" fg:w="238"/><text x="15.8026%" y="303.50"></text></g><g><title>`0x7FFF389B65E6 (238 samples, 0.95%)</title><rect x="15.5526%" y="277" width="0.9464%" height="15" fill="rgb(220,109,13)" fg:x="3911" fg:w="238"/><text x="15.8026%" y="287.50"></text></g><g><title>`0x7FFF38A0F734 (238 samples, 0.95%)</title><rect x="15.5526%" y="261" width="0.9464%" height="15" fill="rgb(232,18,1)" fg:x="3911" fg:w="238"/><text x="15.8026%" y="271.50"></text></g><g><title>`0x7FFF389A9728 (319 samples, 1.27%)</title><rect x="15.2464%" y="309" width="1.2685%" height="15" fill="rgb(215,41,42)" fg:x="3834" fg:w="319"/><text x="15.4964%" y="319.50"></text></g><g><title>`0x7FFF389ABE44 (323 samples, 1.28%)</title><rect x="15.2464%" y="325" width="1.2844%" height="15" fill="rgb(224,123,36)" fg:x="3834" fg:w="323"/><text x="15.4964%" y="335.50"></text></g><g><title>part2.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (324 samples, 1.29%)</title><rect x="15.2464%" y="373" width="1.2884%" height="15" fill="rgb(240,125,3)" fg:x="3834" fg:w="324"/><text x="15.4964%" y="383.50"></text></g><g><title>part2.exe`alloc::alloc::dealloc (324 samples, 1.29%)</title><rect x="15.2464%" y="357" width="1.2884%" height="15" fill="rgb(205,98,50)" fg:x="3834" fg:w="324"/><text x="15.4964%" y="367.50"></text></g><g><title>`0x7FFF389AAB11 (324 samples, 1.29%)</title><rect x="15.2464%" y="341" width="1.2884%" height="15" fill="rgb(205,185,37)" fg:x="3834" fg:w="324"/><text x="15.4964%" y="351.50"></text></g><g><title>part2.exe`alloc::vec::impl$8::deref(alloc::vec::Vec (1,107 samples, 4.40%)</title><rect x="12.1366%" y="549" width="4.4021%" height="15" fill="rgb(238,207,15)" fg:x="3052" fg:w="1107"/><text x="12.3866%" y="559.50">part2..</text></g><g><title>part2.exe`alloc::vec::Vec&lt;char,alloc::alloc::Global&gt;::as_ptr (1,107 samples, 4.40%)</title><rect x="12.1366%" y="533" width="4.4021%" height="15" fill="rgb(213,199,42)" fg:x="3052" fg:w="1107"/><text x="12.3866%" y="543.50">part2..</text></g><g><title>part2.exe`alloc::raw_vec::RawVec&lt;char,alloc::alloc::Global&gt;::ptr (1,107 samples, 4.40%)</title><rect x="12.1366%" y="517" width="4.4021%" height="15" fill="rgb(235,201,11)" fg:x="3052" fg:w="1107"/><text x="12.3866%" y="527.50">part2..</text></g><g><title>part2.exe`lib::map::flat_map::impl$2::from(lib::map::map::Map (1,107 samples, 4.40%)</title><rect x="12.1366%" y="501" width="4.4021%" height="15" fill="rgb(207,46,11)" fg:x="3052" fg:w="1107"/><text x="12.3866%" y="511.50">part2..</text></g><g><title>part2.exe`core::ptr::drop_in_place(lib::map::map::Map (325 samples, 1.29%)</title><rect x="15.2464%" y="485" width="1.2924%" height="15" fill="rgb(241,35,35)" fg:x="3834" fg:w="325"/><text x="15.4964%" y="495.50"></text></g><g><title>part2.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;alloc::vec::Vec (325 samples, 1.29%)</title><rect x="15.2464%" y="469" width="1.2924%" height="15" fill="rgb(243,32,47)" fg:x="3834" fg:w="325"/><text x="15.4964%" y="479.50"></text></g><g><title>part2.exe`alloc::vec::impl$24::drop(alloc::vec::Vec&lt;alloc::vec::Vec (325 samples, 1.29%)</title><rect x="15.2464%" y="453" width="1.2924%" height="15" fill="rgb(247,202,23)" fg:x="3834" fg:w="325"/><text x="15.4964%" y="463.50"></text></g><g><title>part2.exe`core::ptr::drop_in_place(ptr_mut$&lt;slice2$&lt;alloc::vec::Vec (325 samples, 1.29%)</title><rect x="15.2464%" y="437" width="1.2924%" height="15" fill="rgb(219,102,11)" fg:x="3834" fg:w="325"/><text x="15.4964%" y="447.50"></text></g><g><title>part2.exe`core::ptr::drop_in_place(alloc::vec::Vec (325 samples, 1.29%)</title><rect x="15.2464%" y="421" width="1.2924%" height="15" fill="rgb(243,110,44)" fg:x="3834" fg:w="325"/><text x="15.4964%" y="431.50"></text></g><g><title>part2.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (325 samples, 1.29%)</title><rect x="15.2464%" y="405" width="1.2924%" height="15" fill="rgb(222,74,54)" fg:x="3834" fg:w="325"/><text x="15.4964%" y="415.50"></text></g><g><title>part2.exe`alloc::raw_vec::impl$3::drop(alloc::raw_vec::RawVec (325 samples, 1.29%)</title><rect x="15.2464%" y="389" width="1.2924%" height="15" fill="rgb(216,99,12)" fg:x="3834" fg:w="325"/><text x="15.4964%" y="399.50"></text></g><g><title>part2.exe`alloc::vec::into_iter::impl$5::next(alloc::vec::into_iter::IntoIter (289 samples, 1.15%)</title><rect x="16.5467%" y="405" width="1.1492%" height="15" fill="rgb(226,22,26)" fg:x="4161" fg:w="289"/><text x="16.7967%" y="415.50"></text></g><g><title>part2.exe`core::ptr::read (20 samples, 0.08%)</title><rect x="17.6164%" y="389" width="0.0795%" height="15" fill="rgb(217,163,10)" fg:x="4430" fg:w="20"/><text x="17.8664%" y="399.50"></text></g><g><title>part2.exe`ahash::fallback_hash::impl$1::finish (297 samples, 1.18%)</title><rect x="29.8485%" y="293" width="1.1811%" height="15" fill="rgb(213,25,53)" fg:x="7506" fg:w="297"/><text x="30.0985%" y="303.50"></text></g><g><title>part2.exe`ahash::operations::folded_multiply (297 samples, 1.18%)</title><rect x="29.8485%" y="277" width="1.1811%" height="15" fill="rgb(252,105,26)" fg:x="7506" fg:w="297"/><text x="30.0985%" y="287.50"></text></g><g><title>part2.exe`core::num::impl$10::wrapping_mul (151 samples, 0.60%)</title><rect x="30.4291%" y="261" width="0.6005%" height="15" fill="rgb(220,39,43)" fg:x="7652" fg:w="151"/><text x="30.6791%" y="271.50"></text></g><g><title>part2.exe`hashbrown::map::make_hash (469 samples, 1.87%)</title><rect x="29.8485%" y="325" width="1.8650%" height="15" fill="rgb(229,68,48)" fg:x="7506" fg:w="469"/><text x="30.0985%" y="335.50">p..</text></g><g><title>part2.exe`core::hash::BuildHasher::hash_one (469 samples, 1.87%)</title><rect x="29.8485%" y="309" width="1.8650%" height="15" fill="rgb(252,8,32)" fg:x="7506" fg:w="469"/><text x="30.0985%" y="319.50">p..</text></g><g><title>part2.exe`core::hash::impls::impl$5::hash (172 samples, 0.68%)</title><rect x="31.0295%" y="293" width="0.6840%" height="15" fill="rgb(223,20,43)" fg:x="7803" fg:w="172"/><text x="31.2795%" y="303.50"></text></g><g><title>part2.exe`core::hash::impls::impl$13::hash (172 samples, 0.68%)</title><rect x="31.0295%" y="277" width="0.6840%" height="15" fill="rgb(229,81,49)" fg:x="7803" fg:w="172"/><text x="31.2795%" y="287.50"></text></g><g><title>part2.exe`ahash::fallback_hash::impl$1::write_usize (172 samples, 0.68%)</title><rect x="31.0295%" y="261" width="0.6840%" height="15" fill="rgb(236,28,36)" fg:x="7803" fg:w="172"/><text x="31.2795%" y="271.50"></text></g><g><title>part2.exe`ahash::fallback_hash::impl$1::write_u64 (172 samples, 0.68%)</title><rect x="31.0295%" y="245" width="0.6840%" height="15" fill="rgb(249,185,26)" fg:x="7803" fg:w="172"/><text x="31.2795%" y="255.50"></text></g><g><title>part2.exe`ahash::fallback_hash::AHasher::update (172 samples, 0.68%)</title><rect x="31.0295%" y="229" width="0.6840%" height="15" fill="rgb(249,174,33)" fg:x="7803" fg:w="172"/><text x="31.2795%" y="239.50"></text></g><g><title>part2.exe`ahash::operations::folded_multiply (124 samples, 0.49%)</title><rect x="31.2204%" y="213" width="0.4931%" height="15" fill="rgb(233,201,37)" fg:x="7851" fg:w="124"/><text x="31.4704%" y="223.50"></text></g><g><title>part2.exe`core::num::impl$10::wrapping_mul (103 samples, 0.41%)</title><rect x="31.3039%" y="197" width="0.4096%" height="15" fill="rgb(221,78,26)" fg:x="7872" fg:w="103"/><text x="31.5539%" y="207.50"></text></g><g><title>part2.exe`core::intrinsics::copy_nonoverlapping (1,305 samples, 5.19%)</title><rect x="32.4094%" y="245" width="5.1895%" height="15" fill="rgb(250,127,30)" fg:x="8150" fg:w="1305"/><text x="32.6594%" y="255.50">part2...</text></g><g><title>part2.exe`core::iter::range::impl$6::next(core::ops::range::Range (350 samples, 1.39%)</title><rect x="37.5989%" y="245" width="1.3918%" height="15" fill="rgb(230,49,44)" fg:x="9455" fg:w="350"/><text x="37.8489%" y="255.50"></text></g><g><title>part2.exe`core::iter::range::impl$5::spec_next(core::ops::range::Range (350 samples, 1.39%)</title><rect x="37.5989%" y="229" width="1.3918%" height="15" fill="rgb(229,67,23)" fg:x="9455" fg:w="350"/><text x="37.8489%" y="239.50"></text></g><g><title>part2.exe`core::cmp::impls::impl$54::lt (342 samples, 1.36%)</title><rect x="37.6307%" y="213" width="1.3600%" height="15" fill="rgb(249,83,47)" fg:x="9463" fg:w="342"/><text x="37.8807%" y="223.50"></text></g><g><title>`0x7FFF389B4AB9 (4 samples, 0.02%)</title><rect x="39.0146%" y="101" width="0.0159%" height="15" fill="rgb(215,43,3)" fg:x="9811" fg:w="4"/><text x="39.2646%" y="111.50"></text></g><g><title>`0x7FFF389B63CB (7 samples, 0.03%)</title><rect x="39.0345%" y="85" width="0.0278%" height="15" fill="rgb(238,154,13)" fg:x="9816" fg:w="7"/><text x="39.2845%" y="95.50"></text></g><g><title>`0x7FFF389B64A8 (128 samples, 0.51%)</title><rect x="39.0623%" y="69" width="0.5090%" height="15" fill="rgb(219,56,2)" fg:x="9823" fg:w="128"/><text x="39.3123%" y="79.50"></text></g><g><title>`0x7FFF389B65E6 (128 samples, 0.51%)</title><rect x="39.0623%" y="53" width="0.5090%" height="15" fill="rgb(233,0,4)" fg:x="9823" fg:w="128"/><text x="39.3123%" y="63.50"></text></g><g><title>`0x7FFF38A0F734 (128 samples, 0.51%)</title><rect x="39.0623%" y="37" width="0.5090%" height="15" fill="rgb(235,30,7)" fg:x="9823" fg:w="128"/><text x="39.3123%" y="47.50"></text></g><g><title>`0x7FFF389A9728 (143 samples, 0.57%)</title><rect x="39.0106%" y="117" width="0.5687%" height="15" fill="rgb(250,79,13)" fg:x="9810" fg:w="143"/><text x="39.2606%" y="127.50"></text></g><g><title>`0x7FFF389B4B1B (138 samples, 0.55%)</title><rect x="39.0305%" y="101" width="0.5488%" height="15" fill="rgb(211,146,34)" fg:x="9815" fg:w="138"/><text x="39.2805%" y="111.50"></text></g><g><title>`0x7FFF389B63FA (130 samples, 0.52%)</title><rect x="39.0623%" y="85" width="0.5170%" height="15" fill="rgb(228,22,38)" fg:x="9823" fg:w="130"/><text x="39.3123%" y="95.50"></text></g><g><title>`0x7FFF389B65E6 (70 samples, 0.28%)</title><rect x="39.5793%" y="101" width="0.2784%" height="15" fill="rgb(235,168,5)" fg:x="9953" fg:w="70"/><text x="39.8293%" y="111.50"></text></g><g><title>`0x7FFF38A0F734 (70 samples, 0.28%)</title><rect x="39.5793%" y="85" width="0.2784%" height="15" fill="rgb(221,155,16)" fg:x="9953" fg:w="70"/><text x="39.8293%" y="95.50"></text></g><g><title>`0x7FFF389ABE44 (217 samples, 0.86%)</title><rect x="38.9987%" y="133" width="0.8629%" height="15" fill="rgb(215,215,53)" fg:x="9807" fg:w="217"/><text x="39.2487%" y="143.50"></text></g><g><title>`0x7FFF389A9C2C (71 samples, 0.28%)</title><rect x="39.5793%" y="117" width="0.2823%" height="15" fill="rgb(223,4,10)" fg:x="9953" fg:w="71"/><text x="39.8293%" y="127.50"></text></g><g><title>`0x7FFF389AAB11 (219 samples, 0.87%)</title><rect x="38.9987%" y="149" width="0.8709%" height="15" fill="rgb(234,103,6)" fg:x="9807" fg:w="219"/><text x="39.2487%" y="159.50"></text></g><g><title>part2.exe`core::ptr::drop_in_place(hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;,hashbrown::raw::impl$11::prepare_resize::closure_env$0 (221 samples, 0.88%)</title><rect x="38.9947%" y="245" width="0.8788%" height="15" fill="rgb(227,97,0)" fg:x="9806" fg:w="221"/><text x="39.2447%" y="255.50"></text></g><g><title>part2.exe`hashbrown::scopeguard::impl$3::drop(hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;,hashbrown::raw::impl$11::prepare_resize::closure_env$0 (221 samples, 0.88%)</title><rect x="38.9947%" y="229" width="0.8788%" height="15" fill="rgb(234,150,53)" fg:x="9806" fg:w="221"/><text x="39.2447%" y="239.50"></text></g><g><title>part2.exe`hashbrown::raw::impl$11::prepare_resize::closure$0(hashbrown::raw::impl$11::prepare_resize::closure_env$0&lt;alloc::alloc::Global&gt;*, hashbrown::raw::RawTableInner (221 samples, 0.88%)</title><rect x="38.9947%" y="213" width="0.8788%" height="15" fill="rgb(228,201,54)" fg:x="9806" fg:w="221"/><text x="39.2447%" y="223.50"></text></g><g><title>part2.exe`hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;::free_buckets (221 samples, 0.88%)</title><rect x="38.9947%" y="197" width="0.8788%" height="15" fill="rgb(222,22,37)" fg:x="9806" fg:w="221"/><text x="39.2447%" y="207.50"></text></g><g><title>part2.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (221 samples, 0.88%)</title><rect x="38.9947%" y="181" width="0.8788%" height="15" fill="rgb(237,53,32)" fg:x="9806" fg:w="221"/><text x="39.2447%" y="191.50"></text></g><g><title>part2.exe`alloc::alloc::dealloc (221 samples, 0.88%)</title><rect x="38.9947%" y="165" width="0.8788%" height="15" fill="rgb(233,25,53)" fg:x="9806" fg:w="221"/><text x="39.2447%" y="175.50"></text></g><g><title>part2.exe`hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;::bucket_ptr (190 samples, 0.76%)</title><rect x="39.8735%" y="245" width="0.7556%" height="15" fill="rgb(210,40,34)" fg:x="10027" fg:w="190"/><text x="40.1235%" y="255.50"></text></g><g><title>part2.exe`core::core_arch::x86::sse2::_mm_movemask_epi8 (914 samples, 3.63%)</title><rect x="41.5238%" y="181" width="3.6346%" height="15" fill="rgb(241,220,44)" fg:x="10442" fg:w="914"/><text x="41.7738%" y="191.50">part..</text></g><g><title>part2.exe`hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;::find_insert_slot_in_group (1,656 samples, 6.59%)</title><rect x="40.6291%" y="213" width="6.5853%" height="15" fill="rgb(235,28,35)" fg:x="10217" fg:w="1656"/><text x="40.8791%" y="223.50">part2.exe..</text></g><g><title>part2.exe`hashbrown::raw::sse2::Group::match_empty_or_deleted (1,431 samples, 5.69%)</title><rect x="41.5238%" y="197" width="5.6905%" height="15" fill="rgb(210,56,17)" fg:x="10442" fg:w="1431"/><text x="41.7738%" y="207.50">part2.e..</text></g><g><title>part2.exe`core::num::nonzero::NonZeroU16::new (517 samples, 2.06%)</title><rect x="45.1585%" y="181" width="2.0559%" height="15" fill="rgb(224,130,29)" fg:x="11356" fg:w="517"/><text x="45.4085%" y="191.50">p..</text></g><g><title>part2.exe`hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;::fix_insert_slot (715 samples, 2.84%)</title><rect x="47.2144%" y="213" width="2.8433%" height="15" fill="rgb(235,212,8)" fg:x="11873" fg:w="715"/><text x="47.4644%" y="223.50">pa..</text></g><g><title>part2.exe`hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;::is_bucket_full (107 samples, 0.43%)</title><rect x="49.6322%" y="197" width="0.4255%" height="15" fill="rgb(223,33,50)" fg:x="12481" fg:w="107"/><text x="49.8822%" y="207.50"></text></g><g><title>part2.exe`hashbrown::raw::is_full (107 samples, 0.43%)</title><rect x="49.6322%" y="181" width="0.4255%" height="15" fill="rgb(219,149,13)" fg:x="12481" fg:w="107"/><text x="49.8822%" y="191.50"></text></g><g><title>part2.exe`hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;::probe_seq (19 samples, 0.08%)</title><rect x="50.0577%" y="213" width="0.0756%" height="15" fill="rgb(250,156,29)" fg:x="12588" fg:w="19"/><text x="50.3077%" y="223.50"></text></g><g><title>part2.exe`hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;::find_insert_slot (2,397 samples, 9.53%)</title><rect x="40.6291%" y="229" width="9.5320%" height="15" fill="rgb(216,193,19)" fg:x="10217" fg:w="2397"/><text x="40.8791%" y="239.50">part2.exe`hash..</text></g><g><title>part2.exe`hashbrown::raw::sse2::Group::load (7 samples, 0.03%)</title><rect x="50.1332%" y="213" width="0.0278%" height="15" fill="rgb(216,135,14)" fg:x="12607" fg:w="7"/><text x="50.3832%" y="223.50"></text></g><g><title>part2.exe`core::core_arch::x86::sse2::_mm_loadu_si128 (7 samples, 0.03%)</title><rect x="50.1332%" y="197" width="0.0278%" height="15" fill="rgb(241,47,5)" fg:x="12607" fg:w="7"/><text x="50.3832%" y="207.50"></text></g><g><title>part2.exe`core::intrinsics::copy_nonoverlapping (7 samples, 0.03%)</title><rect x="50.1332%" y="181" width="0.0278%" height="15" fill="rgb(233,42,35)" fg:x="12607" fg:w="7"/><text x="50.3832%" y="191.50"></text></g><g><title>part2.exe`hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;::prepare_insert_slot (2,448 samples, 9.73%)</title><rect x="40.6291%" y="245" width="9.7348%" height="15" fill="rgb(231,13,6)" fg:x="10217" fg:w="2448"/><text x="40.8791%" y="255.50">part2.exe`hash..</text></g><g><title>part2.exe`hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;::set_ctrl_h2 (51 samples, 0.20%)</title><rect x="50.1611%" y="229" width="0.2028%" height="15" fill="rgb(207,181,40)" fg:x="12614" fg:w="51"/><text x="50.4111%" y="239.50"></text></g><g><title>part2.exe`hashbrown::raw::h2 (51 samples, 0.20%)</title><rect x="50.1611%" y="213" width="0.2028%" height="15" fill="rgb(254,173,49)" fg:x="12614" fg:w="51"/><text x="50.4111%" y="223.50"></text></g><g><title>part2.exe`core::num::impl$11::wrapping_sub (4 samples, 0.02%)</title><rect x="50.3480%" y="197" width="0.0159%" height="15" fill="rgb(221,1,38)" fg:x="12661" fg:w="4"/><text x="50.5980%" y="207.50"></text></g><g><title>`0x7FFF2F7D1AF0 (16 samples, 0.06%)</title><rect x="50.3798%" y="229" width="0.0636%" height="15" fill="rgb(206,124,46)" fg:x="12669" fg:w="16"/><text x="50.6298%" y="239.50"></text></g><g><title>`0x7FFF2F7D1AF9 (9 samples, 0.04%)</title><rect x="50.4434%" y="229" width="0.0358%" height="15" fill="rgb(249,21,11)" fg:x="12685" fg:w="9"/><text x="50.6934%" y="239.50"></text></g><g><title>`0x7FFF2F7D1B03 (5 samples, 0.02%)</title><rect x="50.4832%" y="229" width="0.0199%" height="15" fill="rgb(222,201,40)" fg:x="12695" fg:w="5"/><text x="50.7332%" y="239.50"></text></g><g><title>`0x7FFF2F7D1B0B (100 samples, 0.40%)</title><rect x="50.5030%" y="229" width="0.3977%" height="15" fill="rgb(235,61,29)" fg:x="12700" fg:w="100"/><text x="50.7530%" y="239.50"></text></g><g><title>`0x7FFF2F7D1B13 (18 samples, 0.07%)</title><rect x="50.9007%" y="229" width="0.0716%" height="15" fill="rgb(219,207,3)" fg:x="12800" fg:w="18"/><text x="51.1507%" y="239.50"></text></g><g><title>`0x7FFF2F7D1B1B (37 samples, 0.15%)</title><rect x="50.9723%" y="229" width="0.1471%" height="15" fill="rgb(222,56,46)" fg:x="12818" fg:w="37"/><text x="51.2223%" y="239.50"></text></g><g><title>`0x7FFF2F7D1B23 (9 samples, 0.04%)</title><rect x="51.1194%" y="229" width="0.0358%" height="15" fill="rgb(239,76,54)" fg:x="12855" fg:w="9"/><text x="51.3694%" y="239.50"></text></g><g><title>`0x7FFF389AF153 (10 samples, 0.04%)</title><rect x="51.1910%" y="117" width="0.0398%" height="15" fill="rgb(231,124,27)" fg:x="12873" fg:w="10"/><text x="51.4410%" y="127.50"></text></g><g><title>`0x7FFF389AF81E (20 samples, 0.08%)</title><rect x="51.2467%" y="117" width="0.0795%" height="15" fill="rgb(249,195,6)" fg:x="12887" fg:w="20"/><text x="51.4967%" y="127.50"></text></g><g><title>`0x7FFF389B62CA (20 samples, 0.08%)</title><rect x="51.2467%" y="101" width="0.0795%" height="15" fill="rgb(237,174,47)" fg:x="12887" fg:w="20"/><text x="51.4967%" y="111.50"></text></g><g><title>`0x7FFF38A0F674 (19 samples, 0.08%)</title><rect x="51.2506%" y="85" width="0.0756%" height="15" fill="rgb(206,201,31)" fg:x="12888" fg:w="19"/><text x="51.5006%" y="95.50"></text></g><g><title>`0x7FFF389F26E2 (10 samples, 0.04%)</title><rect x="51.3262%" y="101" width="0.0398%" height="15" fill="rgb(231,57,52)" fg:x="12907" fg:w="10"/><text x="51.5762%" y="111.50"></text></g><g><title>`0x7FFF38A0F674 (10 samples, 0.04%)</title><rect x="51.3262%" y="85" width="0.0398%" height="15" fill="rgb(248,177,22)" fg:x="12907" fg:w="10"/><text x="51.5762%" y="95.50"></text></g><g><title>`0x7FFF389AFBD4 (16 samples, 0.06%)</title><rect x="51.3262%" y="117" width="0.0636%" height="15" fill="rgb(215,211,37)" fg:x="12907" fg:w="16"/><text x="51.5762%" y="127.50"></text></g><g><title>`0x7FFF389F272F (4 samples, 0.02%)</title><rect x="51.3739%" y="101" width="0.0159%" height="15" fill="rgb(241,128,51)" fg:x="12919" fg:w="4"/><text x="51.6239%" y="111.50"></text></g><g><title>`0x7FFF389B65E6 (4 samples, 0.02%)</title><rect x="51.3739%" y="85" width="0.0159%" height="15" fill="rgb(227,165,31)" fg:x="12919" fg:w="4"/><text x="51.6239%" y="95.50"></text></g><g><title>`0x7FFF38A0F734 (4 samples, 0.02%)</title><rect x="51.3739%" y="69" width="0.0159%" height="15" fill="rgb(228,167,24)" fg:x="12919" fg:w="4"/><text x="51.6239%" y="79.50"></text></g><g><title>part2.exe`hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;::prepare_resize (264 samples, 1.05%)</title><rect x="50.3639%" y="245" width="1.0498%" height="15" fill="rgb(228,143,12)" fg:x="12665" fg:w="264"/><text x="50.6139%" y="255.50"></text></g><g><title>part2.exe`hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;::fallible_with_capacity (64 samples, 0.25%)</title><rect x="51.1592%" y="229" width="0.2545%" height="15" fill="rgb(249,149,8)" fg:x="12865" fg:w="64"/><text x="51.4092%" y="239.50"></text></g><g><title>part2.exe`hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;::new_uninitialized (64 samples, 0.25%)</title><rect x="51.1592%" y="213" width="0.2545%" height="15" fill="rgb(243,35,44)" fg:x="12865" fg:w="64"/><text x="51.4092%" y="223.50"></text></g><g><title>part2.exe`hashbrown::raw::alloc::inner::do_alloc (64 samples, 0.25%)</title><rect x="51.1592%" y="197" width="0.2545%" height="15" fill="rgb(246,89,9)" fg:x="12865" fg:w="64"/><text x="51.4092%" y="207.50"></text></g><g><title>part2.exe`alloc::alloc::impl$1::allocate (64 samples, 0.25%)</title><rect x="51.1592%" y="181" width="0.2545%" height="15" fill="rgb(233,213,13)" fg:x="12865" fg:w="64"/><text x="51.4092%" y="191.50"></text></g><g><title>part2.exe`alloc::alloc::Global::alloc_impl (64 samples, 0.25%)</title><rect x="51.1592%" y="165" width="0.2545%" height="15" fill="rgb(233,141,41)" fg:x="12865" fg:w="64"/><text x="51.4092%" y="175.50"></text></g><g><title>part2.exe`alloc::alloc::alloc (64 samples, 0.25%)</title><rect x="51.1592%" y="149" width="0.2545%" height="15" fill="rgb(239,167,4)" fg:x="12865" fg:w="64"/><text x="51.4092%" y="159.50"></text></g><g><title>`0x7FFF389ACD59 (62 samples, 0.25%)</title><rect x="51.1671%" y="133" width="0.2466%" height="15" fill="rgb(209,217,16)" fg:x="12867" fg:w="62"/><text x="51.4171%" y="143.50"></text></g><g><title>`0x7FFF389AFBF6 (6 samples, 0.02%)</title><rect x="51.3898%" y="117" width="0.0239%" height="15" fill="rgb(219,88,35)" fg:x="12923" fg:w="6"/><text x="51.6398%" y="127.50"></text></g><g><title>part2.exe`ahash::fallback_hash::impl$1::finish (82 samples, 0.33%)</title><rect x="51.4137%" y="181" width="0.3261%" height="15" fill="rgb(220,193,23)" fg:x="12929" fg:w="82"/><text x="51.6637%" y="191.50"></text></g><g><title>part2.exe`ahash::operations::folded_multiply (82 samples, 0.33%)</title><rect x="51.4137%" y="165" width="0.3261%" height="15" fill="rgb(230,90,52)" fg:x="12929" fg:w="82"/><text x="51.6637%" y="175.50"></text></g><g><title>part2.exe`core::num::impl$10::wrapping_mul (70 samples, 0.28%)</title><rect x="51.4614%" y="149" width="0.2784%" height="15" fill="rgb(252,106,19)" fg:x="12941" fg:w="70"/><text x="51.7114%" y="159.50"></text></g><g><title>part2.exe`hashbrown::raw::RawTable&lt;tuple$&lt;usize,tuple$&lt;&gt; &gt;,alloc::alloc::Global&gt;::reserve(unsigned long long, hashbrown::map::make_hasher::closure_env$0&lt;usize,tuple$ (5,030 samples, 20.00%)</title><rect x="32.1788%" y="309" width="20.0024%" height="15" fill="rgb(206,74,20)" fg:x="8092" fg:w="5030"/><text x="32.4288%" y="319.50">part2.exe`hashbrown::raw::RawTa..</text></g><g><title>part2.exe`hashbrown::raw::RawTable&lt;tuple$&lt;usize,tuple$&lt;&gt; &gt;,alloc::alloc::Global&gt;::reserve_rehash&lt;tuple$&lt;usize,tuple$&lt;&gt; &gt;,alloc::alloc::Global,hashbrown::map::make_hasher::closure_env$0&lt;usize,tuple$&lt;&gt;,ahash::random_state::RandomState&gt; &gt;(unsigned long long, hashbrown::map::make_hasher::closure_env$0&lt;usize,tuple$ (4,998 samples, 19.88%)</title><rect x="32.3060%" y="293" width="19.8751%" height="15" fill="rgb(230,138,44)" fg:x="8124" fg:w="4998"/><text x="32.5560%" y="303.50">part2.exe`hashbrown::raw::RawTa..</text></g><g><title>part2.exe`hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;::reserve_rehash_inner(unsigned long long, ref$&lt;dyn$&lt;core::ops::function::Fn&lt;tuple$&lt;ref_mut$&lt;hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt; &gt;,usize&gt;,assoc$&lt;Output,u64&gt; &gt; &gt; &gt;, hashbrown::raw::Fallibility, hashbrown::raw::TableLayout, enum2$&lt;core::option::Option&lt;void (*)(ptr_mut$ (4,998 samples, 19.88%)</title><rect x="32.3060%" y="277" width="19.8751%" height="15" fill="rgb(235,182,43)" fg:x="8124" fg:w="4998"/><text x="32.5560%" y="287.50">part2.exe`hashbrown::raw::RawTa..</text></g><g><title>part2.exe`hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;::resize_inner(unsigned long long, ref$&lt;dyn$&lt;core::ops::function::Fn&lt;tuple$&lt;ref_mut$&lt;hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt; &gt;,usize&gt;,assoc$ (4,998 samples, 19.88%)</title><rect x="32.3060%" y="261" width="19.8751%" height="15" fill="rgb(242,16,51)" fg:x="8124" fg:w="4998"/><text x="32.5560%" y="271.50">part2.exe`hashbrown::raw::RawTa..</text></g><g><title>part2.exe`hashbrown::raw::impl$7::reserve_rehash::closure$0(hashbrown::raw::impl$7::reserve_rehash::closure_env$0&lt;tuple$&lt;usize,tuple$&lt;&gt; &gt;,alloc::alloc::Global,hashbrown::map::make_hasher::closure_env$0&lt;usize,tuple$&lt;&gt;,ahash::random_state::RandomState&gt; &gt;*, hashbrown::raw::RawTableInner (193 samples, 0.77%)</title><rect x="51.4137%" y="245" width="0.7675%" height="15" fill="rgb(248,9,4)" fg:x="12929" fg:w="193"/><text x="51.6637%" y="255.50"></text></g><g><title>part2.exe`hashbrown::map::make_hasher::closure$0(hashbrown::map::make_hasher::closure_env$0&lt;usize,tuple$&lt;&gt;,ahash::random_state::RandomState&gt;*, tuple$&lt;usize,tuple$ (193 samples, 0.77%)</title><rect x="51.4137%" y="229" width="0.7675%" height="15" fill="rgb(210,31,22)" fg:x="12929" fg:w="193"/><text x="51.6637%" y="239.50"></text></g><g><title>part2.exe`hashbrown::map::make_hash (193 samples, 0.77%)</title><rect x="51.4137%" y="213" width="0.7675%" height="15" fill="rgb(239,54,39)" fg:x="12929" fg:w="193"/><text x="51.6637%" y="223.50"></text></g><g><title>part2.exe`core::hash::BuildHasher::hash_one (193 samples, 0.77%)</title><rect x="51.4137%" y="197" width="0.7675%" height="15" fill="rgb(230,99,41)" fg:x="12929" fg:w="193"/><text x="51.6637%" y="207.50"></text></g><g><title>part2.exe`core::hash::impls::impl$5::hash (111 samples, 0.44%)</title><rect x="51.7398%" y="181" width="0.4414%" height="15" fill="rgb(253,106,12)" fg:x="13011" fg:w="111"/><text x="51.9898%" y="191.50"></text></g><g><title>part2.exe`core::hash::impls::impl$13::hash (34 samples, 0.14%)</title><rect x="52.0460%" y="165" width="0.1352%" height="15" fill="rgb(213,46,41)" fg:x="13088" fg:w="34"/><text x="52.2960%" y="175.50"></text></g><g><title>part2.exe`ahash::fallback_hash::impl$1::write_usize (34 samples, 0.14%)</title><rect x="52.0460%" y="149" width="0.1352%" height="15" fill="rgb(215,133,35)" fg:x="13088" fg:w="34"/><text x="52.2960%" y="159.50"></text></g><g><title>part2.exe`ahash::fallback_hash::impl$1::write_u64 (34 samples, 0.14%)</title><rect x="52.0460%" y="133" width="0.1352%" height="15" fill="rgb(213,28,5)" fg:x="13088" fg:w="34"/><text x="52.2960%" y="143.50"></text></g><g><title>part2.exe`ahash::fallback_hash::AHasher::update (34 samples, 0.14%)</title><rect x="52.0460%" y="117" width="0.1352%" height="15" fill="rgb(215,77,49)" fg:x="13088" fg:w="34"/><text x="52.2960%" y="127.50"></text></g><g><title>part2.exe`ahash::operations::folded_multiply (31 samples, 0.12%)</title><rect x="52.0579%" y="101" width="0.1233%" height="15" fill="rgb(248,100,22)" fg:x="13091" fg:w="31"/><text x="52.3079%" y="111.50"></text></g><g><title>part2.exe`core::num::impl$10::wrapping_mul (28 samples, 0.11%)</title><rect x="52.0698%" y="85" width="0.1113%" height="15" fill="rgb(208,67,9)" fg:x="13094" fg:w="28"/><text x="52.3198%" y="95.50"></text></g><g><title>part2.exe`enum2$&lt;core::option::Option&lt;usize&gt; &gt;::is_none (230 samples, 0.91%)</title><rect x="73.2771%" y="293" width="0.9146%" height="15" fill="rgb(219,133,21)" fg:x="18427" fg:w="230"/><text x="73.5271%" y="303.50"></text></g><g><title>part2.exe`enum2$&lt;core::option::Option&lt;usize&gt; &gt;::is_some (230 samples, 0.91%)</title><rect x="73.2771%" y="277" width="0.9146%" height="15" fill="rgb(246,46,29)" fg:x="18427" fg:w="230"/><text x="73.5271%" y="287.50"></text></g><g><title>part2.exe`hashbrown::raw::ProbeSeq::move_next (84 samples, 0.33%)</title><rect x="74.1918%" y="293" width="0.3340%" height="15" fill="rgb(246,185,52)" fg:x="18657" fg:w="84"/><text x="74.4418%" y="303.50"></text></g><g><title>part2.exe`core::core_arch::x86::sse2::_mm_movemask_epi8 (18 samples, 0.07%)</title><rect x="75.0030%" y="261" width="0.0716%" height="15" fill="rgb(252,136,11)" fg:x="18861" fg:w="18"/><text x="75.2530%" y="271.50"></text></g><g><title>part2.exe`hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;::find_insert_slot_in_group (308 samples, 1.22%)</title><rect x="74.5258%" y="293" width="1.2248%" height="15" fill="rgb(219,138,53)" fg:x="18741" fg:w="308"/><text x="74.7758%" y="303.50"></text></g><g><title>part2.exe`hashbrown::raw::sse2::Group::match_empty_or_deleted (214 samples, 0.85%)</title><rect x="74.8996%" y="277" width="0.8510%" height="15" fill="rgb(211,51,23)" fg:x="18835" fg:w="214"/><text x="75.1496%" y="287.50"></text></g><g><title>part2.exe`core::num::nonzero::NonZeroU16::new (170 samples, 0.68%)</title><rect x="75.0746%" y="261" width="0.6760%" height="15" fill="rgb(247,221,28)" fg:x="18879" fg:w="170"/><text x="75.3246%" y="271.50"></text></g><g><title>part2.exe`hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;::fix_insert_slot (282 samples, 1.12%)</title><rect x="75.7506%" y="293" width="1.1214%" height="15" fill="rgb(251,222,45)" fg:x="19049" fg:w="282"/><text x="76.0006%" y="303.50"></text></g><g><title>part2.exe`hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;::is_bucket_full (220 samples, 0.87%)</title><rect x="75.9971%" y="277" width="0.8749%" height="15" fill="rgb(217,162,53)" fg:x="19111" fg:w="220"/><text x="76.2471%" y="287.50"></text></g><g><title>part2.exe`hashbrown::raw::is_full (220 samples, 0.87%)</title><rect x="75.9971%" y="261" width="0.8749%" height="15" fill="rgb(229,93,14)" fg:x="19111" fg:w="220"/><text x="76.2471%" y="271.50"></text></g><g><title>part2.exe`hashbrown::raw::bitmask::BitMask::lowest_set_bit (196 samples, 0.78%)</title><rect x="78.5978%" y="277" width="0.7794%" height="15" fill="rgb(209,67,49)" fg:x="19765" fg:w="196"/><text x="78.8478%" y="287.50"></text></g><g><title>part2.exe`hashbrown::raw::bitmask::impl$3::next (835 samples, 3.32%)</title><rect x="76.8720%" y="293" width="3.3205%" height="15" fill="rgb(213,87,29)" fg:x="19331" fg:w="835"/><text x="77.1220%" y="303.50">par..</text></g><g><title>part2.exe`hashbrown::raw::bitmask::BitMask::remove_lowest_bit (205 samples, 0.82%)</title><rect x="79.3773%" y="277" width="0.8152%" height="15" fill="rgb(205,151,52)" fg:x="19961" fg:w="205"/><text x="79.6273%" y="287.50"></text></g><g><title>part2.exe`hashbrown::raw::h2 (457 samples, 1.82%)</title><rect x="80.1925%" y="293" width="1.8173%" height="15" fill="rgb(253,215,39)" fg:x="20166" fg:w="457"/><text x="80.4425%" y="303.50">p..</text></g><g><title>part2.exe`hashbrown::raw::impl$7::find_or_find_insert_slot::closure$0(hashbrown::raw::impl$7::find_or_find_insert_slot::closure_env$0&lt;tuple$&lt;usize,tuple$&lt;&gt; &gt;,alloc::alloc::Global,hashbrown::map::equivalent_key::closure_env$0&lt;usize,usize,tuple$&lt;&gt; &gt;,hashbrown::map::make_hasher::closure_env$0&lt;usize,tuple$ (307 samples, 1.22%)</title><rect x="82.0098%" y="293" width="1.2208%" height="15" fill="rgb(221,220,41)" fg:x="20623" fg:w="307"/><text x="82.2598%" y="303.50"></text></g><g><title>part2.exe`hashbrown::map::equivalent_key::closure$0(hashbrown::map::equivalent_key::closure_env$0&lt;usize,usize,tuple$&lt;&gt; &gt;*, tuple$&lt;usize,tuple$ (307 samples, 1.22%)</title><rect x="82.0098%" y="277" width="1.2208%" height="15" fill="rgb(218,133,21)" fg:x="20623" fg:w="307"/><text x="82.2598%" y="287.50"></text></g><g><title>part2.exe`hashbrown::impl$0::equivalent (307 samples, 1.22%)</title><rect x="82.0098%" y="261" width="1.2208%" height="15" fill="rgb(221,193,43)" fg:x="20623" fg:w="307"/><text x="82.2598%" y="271.50"></text></g><g><title>part2.exe`core::cmp::impls::impl$9::eq (307 samples, 1.22%)</title><rect x="82.0098%" y="245" width="1.2208%" height="15" fill="rgb(240,128,52)" fg:x="20623" fg:w="307"/><text x="82.2598%" y="255.50"></text></g><g><title>part2.exe`core::cmp::impls::impl$21::eq (33 samples, 0.13%)</title><rect x="83.0994%" y="229" width="0.1312%" height="15" fill="rgb(253,114,12)" fg:x="20897" fg:w="33"/><text x="83.3494%" y="239.50"></text></g><g><title>part2.exe`hashbrown::raw::sse2::Group::load (71 samples, 0.28%)</title><rect x="83.2306%" y="293" width="0.2823%" height="15" fill="rgb(215,223,47)" fg:x="20930" fg:w="71"/><text x="83.4806%" y="303.50"></text></g><g><title>part2.exe`core::core_arch::x86::sse2::_mm_loadu_si128 (71 samples, 0.28%)</title><rect x="83.2306%" y="277" width="0.2823%" height="15" fill="rgb(248,225,23)" fg:x="20930" fg:w="71"/><text x="83.4806%" y="287.50"></text></g><g><title>part2.exe`core::intrinsics::copy_nonoverlapping (71 samples, 0.28%)</title><rect x="83.2306%" y="261" width="0.2823%" height="15" fill="rgb(250,108,0)" fg:x="20930" fg:w="71"/><text x="83.4806%" y="271.50"></text></g><g><title>part2.exe`hashbrown::raw::sse2::Group::match_byte (895 samples, 3.56%)</title><rect x="83.5129%" y="293" width="3.5591%" height="15" fill="rgb(228,208,7)" fg:x="21001" fg:w="895"/><text x="83.7629%" y="303.50">part..</text></g><g><title>part2.exe`core::core_arch::x86::sse2::_mm_movemask_epi8 (895 samples, 3.56%)</title><rect x="83.5129%" y="277" width="3.5591%" height="15" fill="rgb(244,45,10)" fg:x="21001" fg:w="895"/><text x="83.7629%" y="287.50">part..</text></g><g><title>part2.exe`hashbrown::raw::RawTable&lt;tuple$&lt;usize,tuple$&lt;&gt; &gt;,alloc::alloc::Global&gt;::find_or_find_insert_slot(unsigned long long, hashbrown::map::equivalent_key::closure_env$0&lt;usize,usize,tuple$&lt;&gt; &gt;, hashbrown::map::make_hasher::closure_env$0&lt;usize,tuple$ (13,967 samples, 55.54%)</title><rect x="31.7135%" y="325" width="55.5414%" height="15" fill="rgb(207,125,25)" fg:x="7975" fg:w="13967"/><text x="31.9635%" y="335.50">part2.exe`hashbrown::raw::RawTable&lt;tuple$&lt;usize,tuple$&lt;&gt; &gt;,alloc::alloc::Global&gt;::find_or_fi..</text></g><g><title>part2.exe`hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;::find_or_find_insert_slot_inner(unsigned long long, ref_mut$&lt;dyn$&lt;core::ops::function::FnMut&lt;tuple$&lt;usize&gt;,assoc$ (8,820 samples, 35.07%)</title><rect x="52.1812%" y="309" width="35.0738%" height="15" fill="rgb(210,195,18)" fg:x="13122" fg:w="8820"/><text x="52.4312%" y="319.50">part2.exe`hashbrown::raw::RawTableInner&lt;alloc::alloc::Glo..</text></g><g><title>part2.exe`hashbrown::raw::sse2::Group::match_empty (46 samples, 0.18%)</title><rect x="87.0720%" y="293" width="0.1829%" height="15" fill="rgb(249,80,12)" fg:x="21896" fg:w="46"/><text x="87.3220%" y="303.50"></text></g><g><title>part2.exe`hashbrown::raw::sse2::Group::match_byte (43 samples, 0.17%)</title><rect x="87.0839%" y="277" width="0.1710%" height="15" fill="rgb(221,65,9)" fg:x="21899" fg:w="43"/><text x="87.3339%" y="287.50"></text></g><g><title>part2.exe`core::core_arch::x86::sse2::_mm_movemask_epi8 (43 samples, 0.17%)</title><rect x="87.0839%" y="261" width="0.1710%" height="15" fill="rgb(235,49,36)" fg:x="21899" fg:w="43"/><text x="87.3339%" y="271.50"></text></g><g><title>part2.exe`hashbrown::raw::Bucket&lt;tuple$&lt;usize,tuple$&lt;&gt; &gt; &gt;::write(tuple$&lt;usize,tuple$ (10 samples, 0.04%)</title><rect x="87.2549%" y="309" width="0.0398%" height="15" fill="rgb(225,32,20)" fg:x="21942" fg:w="10"/><text x="87.5049%" y="319.50"></text></g><g><title>part2.exe`hashbrown::raw::Bucket&lt;tuple$&lt;usize,tuple$&lt;&gt; &gt; &gt;::as_ptr (10 samples, 0.04%)</title><rect x="87.2549%" y="293" width="0.0398%" height="15" fill="rgb(215,141,46)" fg:x="21942" fg:w="10"/><text x="87.5049%" y="303.50"></text></g><g><title>part2.exe`core::ptr::write(tuple$&lt;usize,tuple$&lt;&gt; &gt;*, tuple$&lt;usize,tuple$ (10 samples, 0.04%)</title><rect x="87.2549%" y="277" width="0.0398%" height="15" fill="rgb(250,160,47)" fg:x="21942" fg:w="10"/><text x="87.5049%" y="287.50"></text></g><g><title>part2.exe`hashbrown::raw::RawTable&lt;tuple$&lt;usize,tuple$&lt;&gt; &gt;,alloc::alloc::Global&gt;::bucket (23 samples, 0.09%)</title><rect x="87.2947%" y="309" width="0.0915%" height="15" fill="rgb(216,222,40)" fg:x="21952" fg:w="23"/><text x="87.5447%" y="319.50"></text></g><g><title>part2.exe`hashbrown::raw::Bucket&lt;tuple$&lt;usize,tuple$&lt;&gt; &gt; &gt;::from_base_index(core::ptr::non_null::NonNull&lt;tuple$&lt;usize,tuple$ (23 samples, 0.09%)</title><rect x="87.2947%" y="293" width="0.0915%" height="15" fill="rgb(234,217,39)" fg:x="21952" fg:w="23"/><text x="87.5447%" y="303.50"></text></g><g><title>part2.exe`core::ptr::mut_ptr::impl$0::sub(tuple$&lt;usize,tuple$ (23 samples, 0.09%)</title><rect x="87.2947%" y="277" width="0.0915%" height="15" fill="rgb(207,178,40)" fg:x="21952" fg:w="23"/><text x="87.5447%" y="287.50"></text></g><g><title>part2.exe`core::ptr::mut_ptr::impl$0::offset(tuple$&lt;usize,tuple$ (23 samples, 0.09%)</title><rect x="87.2947%" y="261" width="0.0915%" height="15" fill="rgb(221,136,13)" fg:x="21952" fg:w="23"/><text x="87.5447%" y="271.50"></text></g><g><title>part2.exe`hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;::set_ctrl_h2 (60 samples, 0.24%)</title><rect x="87.7003%" y="293" width="0.2386%" height="15" fill="rgb(249,199,10)" fg:x="22054" fg:w="60"/><text x="87.9503%" y="303.50"></text></g><g><title>part2.exe`hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;::set_ctrl (60 samples, 0.24%)</title><rect x="87.7003%" y="277" width="0.2386%" height="15" fill="rgb(249,222,13)" fg:x="22054" fg:w="60"/><text x="87.9503%" y="287.50"></text></g><g><title>part2.exe`core::num::impl$11::wrapping_sub (49 samples, 0.19%)</title><rect x="87.7441%" y="261" width="0.1949%" height="15" fill="rgb(244,185,38)" fg:x="22065" fg:w="49"/><text x="87.9941%" y="271.50"></text></g><g><title>part2.exe`core::iter::adapters::map::map_fold::closure$0(core::iter::adapters::map::map_fold::closure_env$0&lt;usize,tuple$&lt;usize,tuple$&lt;&gt; &gt;,tuple$&lt;&gt;,hashbrown::set::impl$11::extend::closure_env$0&lt;usize,ahash::random_state::RandomState,alloc::alloc::Global,core::iter::adapters::filter::Filter&lt;alloc::vec::into_iter::IntoIter&lt;usize,alloc::alloc::Global&gt;,part2::steps::closure_env$2&lt;500&gt; &gt; &gt;,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;tuple$&lt;usize,tuple$&lt;&gt; &gt;,hashbrown::map::impl$95::extend::closure_env$0&lt;usize,tuple$&lt;&gt;,ahash::random_state::RandomState,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::iter::adapters::filter::Filter&lt;alloc::vec::into_iter::IntoIter&lt;usize,alloc::alloc::Global&gt;,part2::steps::closure_env$2&lt;500&gt; &gt;,hashbrown::set::impl$11::extend::closure_env$0&lt;usize,ahash::random_state::RandomState,alloc::alloc::Global,core::iter::adapters::filter::Filter&lt;alloc::vec::into_iter::IntoIter&lt;usize,alloc::alloc::Global&gt;,part2::steps::closure_env$2&lt;500&gt; &gt; &gt; &gt; &gt; &gt; &gt;*, tuple$ (16,199 samples, 64.42%)</title><rect x="23.5257%" y="389" width="64.4172%" height="15" fill="rgb(236,202,9)" fg:x="5916" fg:w="16199"/><text x="23.7757%" y="399.50">part2.exe`core::iter::adapters::map::map_fold::closure$0(core::iter::adapters::map::map_fold::closure_env$0..</text></g><g><title>part2.exe`core::iter::traits::iterator::Iterator::for_each::call::closure$0(core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;tuple$&lt;usize,tuple$&lt;&gt; &gt;,hashbrown::map::impl$95::extend::closure_env$0&lt;usize,tuple$&lt;&gt;,ahash::random_state::RandomState,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::iter::adapters::filter::Filter&lt;alloc::vec::into_iter::IntoIter&lt;usize,alloc::alloc::Global&gt;,part2::steps::closure_env$2&lt;500&gt; &gt;,hashbrown::set::impl$11::extend::closure_env$0&lt;usize,ahash::random_state::RandomState,alloc::alloc::Global,core::iter::adapters::filter::Filter&lt;alloc::vec::into_iter::IntoIter&lt;usize,alloc::alloc::Global&gt;,part2::steps::closure_env$2&lt;500&gt; &gt; &gt; &gt; &gt; &gt;*, tuple$&lt;&gt;, tuple$&lt;usize,tuple$ (16,199 samples, 64.42%)</title><rect x="23.5257%" y="373" width="64.4172%" height="15" fill="rgb(250,229,37)" fg:x="5916" fg:w="16199"/><text x="23.7757%" y="383.50">part2.exe`core::iter::traits::iterator::Iterator::for_each::call::closure$0(core::iter::traits::iterator::I..</text></g><g><title>part2.exe`hashbrown::map::impl$95::extend::closure$0(hashbrown::map::impl$95::extend::closure_env$0&lt;usize,tuple$&lt;&gt;,ahash::random_state::RandomState,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::iter::adapters::filter::Filter&lt;alloc::vec::into_iter::IntoIter&lt;usize,alloc::alloc::Global&gt;,part2::steps::closure_env$2&lt;500&gt; &gt;,hashbrown::set::impl$11::extend::closure_env$0&lt;usize,ahash::random_state::RandomState,alloc::alloc::Global,core::iter::adapters::filter::Filter&lt;alloc::vec::into_iter::IntoIter&lt;usize,alloc::alloc::Global&gt;,part2::steps::closure_env$2&lt;500&gt; &gt; &gt; &gt; &gt;*, tuple$&lt;usize,tuple$ (16,199 samples, 64.42%)</title><rect x="23.5257%" y="357" width="64.4172%" height="15" fill="rgb(206,174,23)" fg:x="5916" fg:w="16199"/><text x="23.7757%" y="367.50">part2.exe`hashbrown::map::impl$95::extend::closure$0(hashbrown::map::impl$95::extend::closure_env$0&lt;usize,t..</text></g><g><title>part2.exe`hashbrown::map::HashMap&lt;usize,tuple$&lt;&gt;,ahash::random_state::RandomState,alloc::alloc::Global&gt;::insert&lt;usize,tuple$&lt;&gt;,ahash::random_state::RandomState,alloc::alloc::Global&gt;(unsigned long long, tuple$ (16,094 samples, 64.00%)</title><rect x="23.9432%" y="341" width="63.9997%" height="15" fill="rgb(211,33,43)" fg:x="6021" fg:w="16094"/><text x="24.1932%" y="351.50">part2.exe`hashbrown::map::HashMap&lt;usize,tuple$&lt;&gt;,ahash::random_state::RandomState,alloc::alloc::Global&gt;::i..</text></g><g><title>part2.exe`hashbrown::raw::RawTable&lt;tuple$&lt;usize,tuple$&lt;&gt; &gt;,alloc::alloc::Global&gt;::insert_in_slot(unsigned long long, hashbrown::raw::InsertSlot, tuple$&lt;usize,tuple$ (173 samples, 0.69%)</title><rect x="87.2549%" y="325" width="0.6880%" height="15" fill="rgb(245,58,50)" fg:x="21942" fg:w="173"/><text x="87.5049%" y="335.50"></text></g><g><title>part2.exe`hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;::record_item_insert_at (140 samples, 0.56%)</title><rect x="87.3862%" y="309" width="0.5567%" height="15" fill="rgb(244,68,36)" fg:x="21975" fg:w="140"/><text x="87.6362%" y="319.50"></text></g><g><title>part2.exe`core::slice::impl$0::get(ref$&lt;slice2$ (272 samples, 1.08%)</title><rect x="87.9429%" y="357" width="1.0816%" height="15" fill="rgb(232,229,15)" fg:x="22115" fg:w="272"/><text x="88.1929%" y="367.50"></text></g><g><title>part2.exe`core::slice::index::impl$2::get(unsigned long long, ref$&lt;slice2$ (272 samples, 1.08%)</title><rect x="87.9429%" y="341" width="1.0816%" height="15" fill="rgb(254,30,23)" fg:x="22115" fg:w="272"/><text x="88.1929%" y="351.50"></text></g><g><title>part2.exe`core::iter::adapters::filter::filter_fold::closure$0(core::iter::adapters::filter::filter_fold::closure_env$0&lt;usize,tuple$&lt;&gt;,part2::steps::closure_env$2&lt;500&gt;,core::iter::adapters::map::map_fold::closure_env$0&lt;usize,tuple$&lt;usize,tuple$&lt;&gt; &gt;,tuple$&lt;&gt;,hashbrown::set::impl$11::extend::closure_env$0&lt;usize,ahash::random_state::RandomState,alloc::alloc::Global,core::iter::adapters::filter::Filter&lt;alloc::vec::into_iter::IntoIter&lt;usize,alloc::alloc::Global&gt;,part2::steps::closure_env$2&lt;500&gt; &gt; &gt;,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;tuple$&lt;usize,tuple$&lt;&gt; &gt;,hashbrown::map::impl$95::extend::closure_env$0&lt;usize,tuple$&lt;&gt;,ahash::random_state::RandomState,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::iter::adapters::filter::Filter&lt;alloc::vec::into_iter::IntoIter&lt;usize,alloc::alloc::Global&gt;,part2::steps::closure_env$2&lt;500&gt; &gt;,hashbrown::set::impl$11::extend::closure_env$0&lt;usize,ahash::random_state::RandomState,alloc::alloc::Global,core::iter::adapters::filter::Filter&lt;alloc::vec::into_iter::IntoIter&lt;usize,alloc::alloc::Global&gt;,part2::steps::closure_env$2&lt;500&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;*, tuple$ (18,019 samples, 71.65%)</title><rect x="17.6959%" y="405" width="71.6547%" height="15" fill="rgb(235,160,14)" fg:x="4450" fg:w="18019"/><text x="17.9459%" y="415.50">part2.exe`core::iter::adapters::filter::filter_fold::closure$0(core::iter::adapters::filter::filter_fold::closure_env$0..</text></g><g><title>part2.exe`part2::steps::closure$2(part2::steps::closure_env$2 (354 samples, 1.41%)</title><rect x="87.9429%" y="389" width="1.4077%" height="15" fill="rgb(212,155,44)" fg:x="22115" fg:w="354"/><text x="88.1929%" y="399.50"></text></g><g><title>part2.exe`part2::filter_rocks (354 samples, 1.41%)</title><rect x="87.9429%" y="373" width="1.4077%" height="15" fill="rgb(226,2,50)" fg:x="22115" fg:w="354"/><text x="88.1929%" y="383.50"></text></g><g><title>part2.exe`enum2$&lt;core::option::Option&lt;ref$&lt;char&gt; &gt; &gt;::map_or(enum2$&lt;core::option::Option&lt;ref$ (82 samples, 0.33%)</title><rect x="89.0245%" y="357" width="0.3261%" height="15" fill="rgb(234,177,6)" fg:x="22387" fg:w="82"/><text x="89.2745%" y="367.50"></text></g><g><title>`0x7FFF389B4B1B (5 samples, 0.02%)</title><rect x="89.3546%" y="229" width="0.0199%" height="15" fill="rgb(217,24,9)" fg:x="22470" fg:w="5"/><text x="89.6046%" y="239.50"></text></g><g><title>`0x7FFF389B63FA (4 samples, 0.02%)</title><rect x="89.3586%" y="213" width="0.0159%" height="15" fill="rgb(220,13,46)" fg:x="22471" fg:w="4"/><text x="89.6086%" y="223.50"></text></g><g><title>`0x7FFF389B64A8 (4 samples, 0.02%)</title><rect x="89.3586%" y="197" width="0.0159%" height="15" fill="rgb(239,221,27)" fg:x="22471" fg:w="4"/><text x="89.6086%" y="207.50"></text></g><g><title>`0x7FFF389B65E6 (4 samples, 0.02%)</title><rect x="89.3586%" y="181" width="0.0159%" height="15" fill="rgb(222,198,25)" fg:x="22471" fg:w="4"/><text x="89.6086%" y="191.50"></text></g><g><title>`0x7FFF38A0F734 (4 samples, 0.02%)</title><rect x="89.3586%" y="165" width="0.0159%" height="15" fill="rgb(211,99,13)" fg:x="22471" fg:w="4"/><text x="89.6086%" y="175.50"></text></g><g><title>`0x7FFF389A9728 (7 samples, 0.03%)</title><rect x="89.3506%" y="245" width="0.0278%" height="15" fill="rgb(232,111,31)" fg:x="22469" fg:w="7"/><text x="89.6006%" y="255.50"></text></g><g><title>`0x7FFF389A9C2C (206 samples, 0.82%)</title><rect x="89.3824%" y="245" width="0.8192%" height="15" fill="rgb(245,82,37)" fg:x="22477" fg:w="206"/><text x="89.6324%" y="255.50"></text></g><g><title>`0x7FFF389B65E6 (206 samples, 0.82%)</title><rect x="89.3824%" y="229" width="0.8192%" height="15" fill="rgb(227,149,46)" fg:x="22477" fg:w="206"/><text x="89.6324%" y="239.50"></text></g><g><title>`0x7FFF38A0F734 (206 samples, 0.82%)</title><rect x="89.3824%" y="213" width="0.8192%" height="15" fill="rgb(218,36,50)" fg:x="22477" fg:w="206"/><text x="89.6324%" y="223.50"></text></g><g><title>`0x7FFF389AAB11 (215 samples, 0.85%)</title><rect x="89.3506%" y="277" width="0.8550%" height="15" fill="rgb(226,80,48)" fg:x="22469" fg:w="215"/><text x="89.6006%" y="287.50"></text></g><g><title>`0x7FFF389ABE44 (215 samples, 0.85%)</title><rect x="89.3506%" y="261" width="0.8550%" height="15" fill="rgb(238,224,15)" fg:x="22469" fg:w="215"/><text x="89.6006%" y="271.50"></text></g><g><title>part2.exe`core::iter::traits::iterator::Iterator::collect(core::iter::adapters::filter::Filter&lt;alloc::vec::into_iter::IntoIter&lt;usize,alloc::alloc::Global&gt;,part2::steps::closure_env$2 (18,526 samples, 73.67%)</title><rect x="16.5388%" y="549" width="73.6708%" height="15" fill="rgb(241,136,10)" fg:x="4159" fg:w="18526"/><text x="16.7888%" y="559.50">part2.exe`core::iter::traits::iterator::Iterator::collect(core::iter::adapters::filter::Filter&lt;alloc::vec::into_iter::Into..</text></g><g><title>part2.exe`ahash::hash_set::impl$14::from_iter(core::iter::adapters::filter::Filter&lt;alloc::vec::into_iter::IntoIter&lt;usize,alloc::alloc::Global&gt;,part2::steps::closure_env$2 (18,526 samples, 73.67%)</title><rect x="16.5388%" y="533" width="73.6708%" height="15" fill="rgb(208,32,45)" fg:x="4159" fg:w="18526"/><text x="16.7888%" y="543.50">part2.exe`ahash::hash_set::impl$14::from_iter(core::iter::adapters::filter::Filter&lt;alloc::vec::into_iter::IntoIter&lt;usize,a..</text></g><g><title>part2.exe`std::collections::hash::set::impl$9::extend(std::collections::hash::set::HashSet&lt;usize,ahash::random_state::RandomState&gt;*, core::iter::adapters::filter::Filter&lt;alloc::vec::into_iter::IntoIter&lt;usize,alloc::alloc::Global&gt;,part2::steps::closure_env$2 (18,524 samples, 73.66%)</title><rect x="16.5467%" y="517" width="73.6629%" height="15" fill="rgb(207,135,9)" fg:x="4161" fg:w="18524"/><text x="16.7967%" y="527.50">part2.exe`std::collections::hash::set::impl$9::extend(std::collections::hash::set::HashSet&lt;usize,ahash::random_state::Rand..</text></g><g><title>part2.exe`hashbrown::set::impl$11::extend(hashbrown::set::HashSet&lt;usize,ahash::random_state::RandomState,alloc::alloc::Global&gt;*, core::iter::adapters::filter::Filter&lt;alloc::vec::into_iter::IntoIter&lt;usize,alloc::alloc::Global&gt;,part2::steps::closure_env$2 (18,524 samples, 73.66%)</title><rect x="16.5467%" y="501" width="73.6629%" height="15" fill="rgb(206,86,44)" fg:x="4161" fg:w="18524"/><text x="16.7967%" y="511.50">part2.exe`hashbrown::set::impl$11::extend(hashbrown::set::HashSet&lt;usize,ahash::random_state::RandomState,alloc::alloc::Glo..</text></g><g><title>part2.exe`hashbrown::map::impl$95::extend(hashbrown::map::HashMap&lt;usize,tuple$&lt;&gt;,ahash::random_state::RandomState,alloc::alloc::Global&gt;*, core::iter::adapters::map::Map&lt;core::iter::adapters::filter::Filter&lt;alloc::vec::into_iter::IntoIter&lt;usize,alloc::alloc::Global&gt;,part2::steps::closure_env$2&lt;500&gt; &gt;,hashbrown::set::impl$11::extend::closure_env$0&lt;usize,ahash::random_state::RandomState,alloc::alloc::Global,core::iter::adapters::filter::Filter&lt;alloc::vec::into_iter::IntoIter&lt;usize,alloc::alloc::Global&gt;,part2::steps::closure_env$2 (18,524 samples, 73.66%)</title><rect x="16.5467%" y="485" width="73.6629%" height="15" fill="rgb(245,177,15)" fg:x="4161" fg:w="18524"/><text x="16.7967%" y="495.50">part2.exe`hashbrown::map::impl$95::extend(hashbrown::map::HashMap&lt;usize,tuple$&lt;&gt;,ahash::random_state::RandomState,alloc::a..</text></g><g><title>part2.exe`core::iter::traits::iterator::Iterator::for_each(core::iter::adapters::map::Map&lt;core::iter::adapters::filter::Filter&lt;alloc::vec::into_iter::IntoIter&lt;usize,alloc::alloc::Global&gt;,part2::steps::closure_env$2&lt;500&gt; &gt;,hashbrown::set::impl$11::extend::closure_env$0&lt;usize,ahash::random_state::RandomState,alloc::alloc::Global,core::iter::adapters::filter::Filter&lt;alloc::vec::into_iter::IntoIter&lt;usize,alloc::alloc::Global&gt;,part2::steps::closure_env$2&lt;500&gt; &gt; &gt; &gt;, hashbrown::map::impl$95::extend::closure_env$0&lt;usize,tuple$&lt;&gt;,ahash::random_state::RandomState,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::iter::adapters::filter::Filter&lt;alloc::vec::into_iter::IntoIter&lt;usize,alloc::alloc::Global&gt;,part2::steps::closure_env$2&lt;500&gt; &gt;,hashbrown::set::impl$11::extend::closure_env$0&lt;usize,ahash::random_state::RandomState,alloc::alloc::Global,core::iter::adapters::filter::Filter&lt;alloc::vec::into_iter::IntoIter&lt;usize,alloc::alloc::Global&gt;,part2::steps::closure_env$2 (18,524 samples, 73.66%)</title><rect x="16.5467%" y="469" width="73.6629%" height="15" fill="rgb(206,64,50)" fg:x="4161" fg:w="18524"/><text x="16.7967%" y="479.50">part2.exe`core::iter::traits::iterator::Iterator::for_each(core::iter::adapters::map::Map&lt;core::iter::adapters::filter::Fi..</text></g><g><title>part2.exe`core::iter::adapters::map::impl$2::fold(core::iter::adapters::map::Map&lt;core::iter::adapters::filter::Filter&lt;alloc::vec::into_iter::IntoIter&lt;usize,alloc::alloc::Global&gt;,part2::steps::closure_env$2&lt;500&gt; &gt;,hashbrown::set::impl$11::extend::closure_env$0&lt;usize,ahash::random_state::RandomState,alloc::alloc::Global,core::iter::adapters::filter::Filter&lt;alloc::vec::into_iter::IntoIter&lt;usize,alloc::alloc::Global&gt;,part2::steps::closure_env$2&lt;500&gt; &gt; &gt; &gt;, tuple$&lt;&gt;, core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;tuple$&lt;usize,tuple$&lt;&gt; &gt;,hashbrown::map::impl$95::extend::closure_env$0&lt;usize,tuple$&lt;&gt;,ahash::random_state::RandomState,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::iter::adapters::filter::Filter&lt;alloc::vec::into_iter::IntoIter&lt;usize,alloc::alloc::Global&gt;,part2::steps::closure_env$2&lt;500&gt; &gt;,hashbrown::set::impl$11::extend::closure_env$0&lt;usize,ahash::random_state::RandomState,alloc::alloc::Global,core::iter::adapters::filter::Filter&lt;alloc::vec::into_iter::IntoIter&lt;usize,alloc::alloc::Global&gt;,part2::steps::closure_env$2 (18,524 samples, 73.66%)</title><rect x="16.5467%" y="453" width="73.6629%" height="15" fill="rgb(234,36,40)" fg:x="4161" fg:w="18524"/><text x="16.7967%" y="463.50">part2.exe`core::iter::adapters::map::impl$2::fold(core::iter::adapters::map::Map&lt;core::iter::adapters::filter::Filter&lt;allo..</text></g><g><title>part2.exe`core::iter::adapters::filter::impl$2::fold(core::iter::adapters::filter::Filter&lt;alloc::vec::into_iter::IntoIter&lt;usize,alloc::alloc::Global&gt;,part2::steps::closure_env$2&lt;500&gt; &gt;, tuple$&lt;&gt;, core::iter::adapters::map::map_fold::closure_env$0&lt;usize,tuple$&lt;usize,tuple$&lt;&gt; &gt;,tuple$&lt;&gt;,hashbrown::set::impl$11::extend::closure_env$0&lt;usize,ahash::random_state::RandomState,alloc::alloc::Global,core::iter::adapters::filter::Filter&lt;alloc::vec::into_iter::IntoIter&lt;usize,alloc::alloc::Global&gt;,part2::steps::closure_env$2&lt;500&gt; &gt; &gt;,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;tuple$&lt;usize,tuple$&lt;&gt; &gt;,hashbrown::map::impl$95::extend::closure_env$0&lt;usize,tuple$&lt;&gt;,ahash::random_state::RandomState,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::iter::adapters::filter::Filter&lt;alloc::vec::into_iter::IntoIter&lt;usize,alloc::alloc::Global&gt;,part2::steps::closure_env$2&lt;500&gt; &gt;,hashbrown::set::impl$11::extend::closure_env$0&lt;usize,ahash::random_state::RandomState,alloc::alloc::Global,core::iter::adapters::filter::Filter&lt;alloc::vec::into_iter::IntoIter&lt;usize,alloc::alloc::Global&gt;,part2::steps::closure_env$2 (18,524 samples, 73.66%)</title><rect x="16.5467%" y="437" width="73.6629%" height="15" fill="rgb(213,64,8)" fg:x="4161" fg:w="18524"/><text x="16.7967%" y="447.50">part2.exe`core::iter::adapters::filter::impl$2::fold(core::iter::adapters::filter::Filter&lt;alloc::vec::into_iter::IntoIter&lt;..</text></g><g><title>part2.exe`core::iter::traits::iterator::Iterator::fold(alloc::vec::into_iter::IntoIter&lt;usize,alloc::alloc::Global&gt;, tuple$&lt;&gt;, core::iter::adapters::filter::filter_fold::closure_env$0&lt;usize,tuple$&lt;&gt;,part2::steps::closure_env$2&lt;500&gt;,core::iter::adapters::map::map_fold::closure_env$0&lt;usize,tuple$&lt;usize,tuple$&lt;&gt; &gt;,tuple$&lt;&gt;,hashbrown::set::impl$11::extend::closure_env$0&lt;usize,ahash::random_state::RandomState,alloc::alloc::Global,core::iter::adapters::filter::Filter&lt;alloc::vec::into_iter::IntoIter&lt;usize,alloc::alloc::Global&gt;,part2::steps::closure_env$2&lt;500&gt; &gt; &gt;,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;tuple$&lt;usize,tuple$&lt;&gt; &gt;,hashbrown::map::impl$95::extend::closure_env$0&lt;usize,tuple$&lt;&gt;,ahash::random_state::RandomState,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::iter::adapters::filter::Filter&lt;alloc::vec::into_iter::IntoIter&lt;usize,alloc::alloc::Global&gt;,part2::steps::closure_env$2&lt;500&gt; &gt;,hashbrown::set::impl$11::extend::closure_env$0&lt;usize,ahash::random_state::RandomState,alloc::alloc::Global,core::iter::adapters::filter::Filter&lt;alloc::vec::into_iter::IntoIter&lt;usize,alloc::alloc::Global&gt;,part2::steps::closure_env$2 (18,524 samples, 73.66%)</title><rect x="16.5467%" y="421" width="73.6629%" height="15" fill="rgb(210,75,36)" fg:x="4161" fg:w="18524"/><text x="16.7967%" y="431.50">part2.exe`core::iter::traits::iterator::Iterator::fold(alloc::vec::into_iter::IntoIter&lt;usize,alloc::alloc::Global&gt;, tuple$..</text></g><g><title>part2.exe`core::ptr::drop_in_place(alloc::vec::into_iter::IntoIter (216 samples, 0.86%)</title><rect x="89.3506%" y="405" width="0.8589%" height="15" fill="rgb(229,88,21)" fg:x="22469" fg:w="216"/><text x="89.6006%" y="415.50"></text></g><g><title>part2.exe`alloc::vec::into_iter::impl$14::drop(alloc::vec::into_iter::IntoIter (216 samples, 0.86%)</title><rect x="89.3506%" y="389" width="0.8589%" height="15" fill="rgb(252,204,47)" fg:x="22469" fg:w="216"/><text x="89.6006%" y="399.50"></text></g><g><title>part2.exe`core::ptr::drop_in_place(alloc::vec::into_iter::impl$14::drop::DropGuard (216 samples, 0.86%)</title><rect x="89.3506%" y="373" width="0.8589%" height="15" fill="rgb(208,77,27)" fg:x="22469" fg:w="216"/><text x="89.6006%" y="383.50"></text></g><g><title>part2.exe`alloc::vec::into_iter::impl$14::drop::impl$0::drop(alloc::vec::into_iter::impl$14::drop::DropGuard (216 samples, 0.86%)</title><rect x="89.3506%" y="357" width="0.8589%" height="15" fill="rgb(221,76,26)" fg:x="22469" fg:w="216"/><text x="89.6006%" y="367.50"></text></g><g><title>part2.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (216 samples, 0.86%)</title><rect x="89.3506%" y="341" width="0.8589%" height="15" fill="rgb(225,139,18)" fg:x="22469" fg:w="216"/><text x="89.6006%" y="351.50"></text></g><g><title>part2.exe`alloc::raw_vec::impl$3::drop(alloc::raw_vec::RawVec (216 samples, 0.86%)</title><rect x="89.3506%" y="325" width="0.8589%" height="15" fill="rgb(230,137,11)" fg:x="22469" fg:w="216"/><text x="89.6006%" y="335.50"></text></g><g><title>part2.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (216 samples, 0.86%)</title><rect x="89.3506%" y="309" width="0.8589%" height="15" fill="rgb(212,28,1)" fg:x="22469" fg:w="216"/><text x="89.6006%" y="319.50"></text></g><g><title>part2.exe`alloc::alloc::dealloc (216 samples, 0.86%)</title><rect x="89.3506%" y="293" width="0.8589%" height="15" fill="rgb(248,164,17)" fg:x="22469" fg:w="216"/><text x="89.6006%" y="303.50"></text></g><g><title>part2.exe`core::iter::traits::iterator::Iterator::find(core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;char&gt; &gt;*, part2::steps::closure_env$1 (3 samples, 0.01%)</title><rect x="90.2096%" y="549" width="0.0119%" height="15" fill="rgb(222,171,42)" fg:x="22685" fg:w="3"/><text x="90.4596%" y="559.50"></text></g><g><title>part2.exe`core::iter::adapters::enumerate::impl$1::try_fold(core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;char&gt; &gt;*, tuple$&lt;&gt;, core::iter::traits::iterator::Iterator::find::check::closure_env$0&lt;tuple$&lt;usize,ref$&lt;char&gt; &gt;,part2::steps::closure_env$1 (3 samples, 0.01%)</title><rect x="90.2096%" y="533" width="0.0119%" height="15" fill="rgb(243,84,45)" fg:x="22685" fg:w="3"/><text x="90.4596%" y="543.50"></text></g><g><title>part2.exe`core::iter::traits::iterator::Iterator::try_fold(core::slice::iter::Iter&lt;char&gt;*, tuple$&lt;&gt;, core::iter::adapters::enumerate::impl$1::try_fold::enumerate::closure_env$0&lt;ref$&lt;char&gt;,tuple$&lt;&gt;,enum2$&lt;core::ops::control_flow::ControlFlow&lt;tuple$&lt;usize,ref$&lt;char&gt; &gt;,tuple$&lt;&gt; &gt; &gt;,core::iter::traits::iterator::Iterator::find::check::closure_env$0&lt;tuple$&lt;usize,ref$&lt;char&gt; &gt;,part2::steps::closure_env$1 (3 samples, 0.01%)</title><rect x="90.2096%" y="517" width="0.0119%" height="15" fill="rgb(252,49,23)" fg:x="22685" fg:w="3"/><text x="90.4596%" y="527.50"></text></g><g><title>part2.exe`core::slice::iter::impl$181::next(core::slice::iter::Iter (3 samples, 0.01%)</title><rect x="90.2096%" y="501" width="0.0119%" height="15" fill="rgb(215,19,7)" fg:x="22685" fg:w="3"/><text x="90.4596%" y="511.50"></text></g><g><title>part2.exe`core::ptr::non_null::impl$12::eq(core::ptr::non_null::NonNull&lt;char&gt;*, core::ptr::non_null::NonNull (3 samples, 0.01%)</title><rect x="90.2096%" y="485" width="0.0119%" height="15" fill="rgb(238,81,41)" fg:x="22685" fg:w="3"/><text x="90.4596%" y="495.50"></text></g><g><title>part2.exe`alloc::vec::impl$8::deref(alloc::vec::Vec (3 samples, 0.01%)</title><rect x="90.2334%" y="517" width="0.0119%" height="15" fill="rgb(210,199,37)" fg:x="22691" fg:w="3"/><text x="90.4834%" y="527.50"></text></g><g><title>part2.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (3 samples, 0.01%)</title><rect x="90.2454%" y="469" width="0.0119%" height="15" fill="rgb(244,192,49)" fg:x="22694" fg:w="3"/><text x="90.4954%" y="479.50"></text></g><g><title>part2.exe`alloc::alloc::dealloc (3 samples, 0.01%)</title><rect x="90.2454%" y="453" width="0.0119%" height="15" fill="rgb(226,211,11)" fg:x="22694" fg:w="3"/><text x="90.4954%" y="463.50"></text></g><g><title>`0x7FFF389AAB11 (3 samples, 0.01%)</title><rect x="90.2454%" y="437" width="0.0119%" height="15" fill="rgb(236,162,54)" fg:x="22694" fg:w="3"/><text x="90.4954%" y="447.50"></text></g><g><title>`0x7FFF2F7D12FB (741 samples, 2.95%)</title><rect x="90.2573%" y="453" width="2.9467%" height="15" fill="rgb(220,229,9)" fg:x="22697" fg:w="741"/><text x="90.5073%" y="463.50">`0..</text></g><g><title>`0x7FFF2F7D1497 (7 samples, 0.03%)</title><rect x="93.2079%" y="453" width="0.0278%" height="15" fill="rgb(250,87,22)" fg:x="23439" fg:w="7"/><text x="93.4579%" y="463.50"></text></g><g><title>`0x7FFF2F7D14F3 (31 samples, 0.12%)</title><rect x="93.2437%" y="453" width="0.1233%" height="15" fill="rgb(239,43,17)" fg:x="23448" fg:w="31"/><text x="93.4937%" y="463.50"></text></g><g><title>`0x7FFF2F7D14F7 (18 samples, 0.07%)</title><rect x="93.3670%" y="453" width="0.0716%" height="15" fill="rgb(231,177,25)" fg:x="23479" fg:w="18"/><text x="93.6170%" y="463.50"></text></g><g><title>`0x7FFF2F7D14FC (34 samples, 0.14%)</title><rect x="93.4386%" y="453" width="0.1352%" height="15" fill="rgb(219,179,1)" fg:x="23497" fg:w="34"/><text x="93.6886%" y="463.50"></text></g><g><title>`0x7FFF2F7D1501 (14 samples, 0.06%)</title><rect x="93.5738%" y="453" width="0.0557%" height="15" fill="rgb(238,219,53)" fg:x="23531" fg:w="14"/><text x="93.8238%" y="463.50"></text></g><g><title>`0x7FFF2F7D1526 (25 samples, 0.10%)</title><rect x="93.6334%" y="453" width="0.0994%" height="15" fill="rgb(232,167,36)" fg:x="23546" fg:w="25"/><text x="93.8834%" y="463.50"></text></g><g><title>`0x7FFF2F7D152E (18 samples, 0.07%)</title><rect x="93.7329%" y="453" width="0.0716%" height="15" fill="rgb(244,19,51)" fg:x="23571" fg:w="18"/><text x="93.9829%" y="463.50"></text></g><g><title>`0x7FFF2F7D1536 (24 samples, 0.10%)</title><rect x="93.8044%" y="453" width="0.0954%" height="15" fill="rgb(224,6,22)" fg:x="23589" fg:w="24"/><text x="94.0544%" y="463.50"></text></g><g><title>`0x7FFF2F7D153E (11 samples, 0.04%)</title><rect x="93.8999%" y="453" width="0.0437%" height="15" fill="rgb(224,145,5)" fg:x="23613" fg:w="11"/><text x="94.1499%" y="463.50"></text></g><g><title>`0x7FFF2F7D15FF (6 samples, 0.02%)</title><rect x="93.9555%" y="453" width="0.0239%" height="15" fill="rgb(234,130,49)" fg:x="23627" fg:w="6"/><text x="94.2055%" y="463.50"></text></g><g><title>part2.exe`alloc::vec::Vec&lt;char,alloc::alloc::Global&gt;::set_len (461 samples, 1.83%)</title><rect x="93.9794%" y="453" width="1.8332%" height="15" fill="rgb(254,6,2)" fg:x="23633" fg:w="461"/><text x="94.2294%" y="463.50">p..</text></g><g><title>`0x7FFF2F7D12FB (461 samples, 1.83%)</title><rect x="93.9794%" y="437" width="1.8332%" height="15" fill="rgb(208,96,46)" fg:x="23633" fg:w="461"/><text x="94.2294%" y="447.50">`..</text></g><g><title>`0x7FFF389AF153 (95 samples, 0.38%)</title><rect x="95.8166%" y="325" width="0.3778%" height="15" fill="rgb(239,3,39)" fg:x="24095" fg:w="95"/><text x="96.0666%" y="335.50"></text></g><g><title>`0x7FFF389AF157 (4 samples, 0.02%)</title><rect x="96.1944%" y="325" width="0.0159%" height="15" fill="rgb(233,210,1)" fg:x="24190" fg:w="4"/><text x="96.4444%" y="335.50"></text></g><g><title>`0x7FFF389AF22D (4 samples, 0.02%)</title><rect x="96.2103%" y="325" width="0.0159%" height="15" fill="rgb(244,137,37)" fg:x="24194" fg:w="4"/><text x="96.4603%" y="335.50"></text></g><g><title>`0x7FFF389B423A (4 samples, 0.02%)</title><rect x="96.2103%" y="309" width="0.0159%" height="15" fill="rgb(240,136,2)" fg:x="24194" fg:w="4"/><text x="96.4603%" y="319.50"></text></g><g><title>`0x7FFF389AF26C (4 samples, 0.02%)</title><rect x="96.2341%" y="325" width="0.0159%" height="15" fill="rgb(239,18,37)" fg:x="24200" fg:w="4"/><text x="96.4841%" y="335.50"></text></g><g><title>`0x7FFF389AF36F (3 samples, 0.01%)</title><rect x="96.2699%" y="325" width="0.0119%" height="15" fill="rgb(218,185,22)" fg:x="24209" fg:w="3"/><text x="96.5199%" y="335.50"></text></g><g><title>`0x7FFF389B5B59 (87 samples, 0.35%)</title><rect x="96.2858%" y="293" width="0.3460%" height="15" fill="rgb(225,218,4)" fg:x="24213" fg:w="87"/><text x="96.5358%" y="303.50"></text></g><g><title>`0x7FFF38A0F674 (87 samples, 0.35%)</title><rect x="96.2858%" y="277" width="0.3460%" height="15" fill="rgb(230,182,32)" fg:x="24213" fg:w="87"/><text x="96.5358%" y="287.50"></text></g><g><title>`0x7FFF389B5D75 (86 samples, 0.34%)</title><rect x="96.6437%" y="277" width="0.3420%" height="15" fill="rgb(242,56,43)" fg:x="24303" fg:w="86"/><text x="96.8937%" y="287.50"></text></g><g><title>`0x7FFF389B5D79 (6 samples, 0.02%)</title><rect x="96.9857%" y="277" width="0.0239%" height="15" fill="rgb(233,99,24)" fg:x="24389" fg:w="6"/><text x="97.2357%" y="287.50"></text></g><g><title>`0x7FFF389B5DD8 (11 samples, 0.04%)</title><rect x="97.0096%" y="277" width="0.0437%" height="15" fill="rgb(234,209,42)" fg:x="24395" fg:w="11"/><text x="97.2596%" y="287.50"></text></g><g><title>`0x7FFF389B57DB (195 samples, 0.78%)</title><rect x="96.2819%" y="309" width="0.7754%" height="15" fill="rgb(227,7,12)" fg:x="24212" fg:w="195"/><text x="96.5319%" y="319.50"></text></g><g><title>`0x7FFF389B5C25 (104 samples, 0.41%)</title><rect x="96.6437%" y="293" width="0.4136%" height="15" fill="rgb(245,203,43)" fg:x="24303" fg:w="104"/><text x="96.8937%" y="303.50"></text></g><g><title>`0x7FFF389B57F7 (3 samples, 0.01%)</title><rect x="97.0573%" y="309" width="0.0119%" height="15" fill="rgb(238,205,33)" fg:x="24407" fg:w="3"/><text x="97.3073%" y="319.50"></text></g><g><title>`0x7FFF389B5809 (5 samples, 0.02%)</title><rect x="97.0692%" y="309" width="0.0199%" height="15" fill="rgb(231,56,7)" fg:x="24410" fg:w="5"/><text x="97.3192%" y="319.50"></text></g><g><title>`0x7FFF389B4410 (3 samples, 0.01%)</title><rect x="97.0772%" y="293" width="0.0119%" height="15" fill="rgb(244,186,29)" fg:x="24412" fg:w="3"/><text x="97.3272%" y="303.50"></text></g><g><title>part2.exe`alloc::vec::Vec&lt;char,alloc::alloc::Global&gt;::with_capacity (325 samples, 1.29%)</title><rect x="95.8126%" y="453" width="1.2924%" height="15" fill="rgb(234,111,31)" fg:x="24094" fg:w="325"/><text x="96.0626%" y="463.50"></text></g><g><title>part2.exe`alloc::vec::Vec&lt;char,alloc::alloc::Global&gt;::with_capacity_in (325 samples, 1.29%)</title><rect x="95.8126%" y="437" width="1.2924%" height="15" fill="rgb(241,149,10)" fg:x="24094" fg:w="325"/><text x="96.0626%" y="447.50"></text></g><g><title>part2.exe`alloc::raw_vec::RawVec&lt;char,alloc::alloc::Global&gt;::with_capacity_in (325 samples, 1.29%)</title><rect x="95.8126%" y="421" width="1.2924%" height="15" fill="rgb(249,206,44)" fg:x="24094" fg:w="325"/><text x="96.0626%" y="431.50"></text></g><g><title>part2.exe`alloc::raw_vec::RawVec&lt;char,alloc::alloc::Global&gt;::allocate_in (325 samples, 1.29%)</title><rect x="95.8126%" y="405" width="1.2924%" height="15" fill="rgb(251,153,30)" fg:x="24094" fg:w="325"/><text x="96.0626%" y="415.50"></text></g><g><title>part2.exe`alloc::alloc::impl$1::allocate (325 samples, 1.29%)</title><rect x="95.8126%" y="389" width="1.2924%" height="15" fill="rgb(239,152,38)" fg:x="24094" fg:w="325"/><text x="96.0626%" y="399.50"></text></g><g><title>part2.exe`alloc::alloc::Global::alloc_impl (325 samples, 1.29%)</title><rect x="95.8126%" y="373" width="1.2924%" height="15" fill="rgb(249,139,47)" fg:x="24094" fg:w="325"/><text x="96.0626%" y="383.50"></text></g><g><title>part2.exe`alloc::alloc::alloc (325 samples, 1.29%)</title><rect x="95.8126%" y="357" width="1.2924%" height="15" fill="rgb(244,64,35)" fg:x="24094" fg:w="325"/><text x="96.0626%" y="367.50"></text></g><g><title>`0x7FFF389ACD59 (324 samples, 1.29%)</title><rect x="95.8166%" y="341" width="1.2884%" height="15" fill="rgb(216,46,15)" fg:x="24095" fg:w="324"/><text x="96.0666%" y="351.50"></text></g><g><title>`0x7FFF389AF738 (207 samples, 0.82%)</title><rect x="96.2819%" y="325" width="0.8232%" height="15" fill="rgb(250,74,19)" fg:x="24212" fg:w="207"/><text x="96.5319%" y="335.50"></text></g><g><title>part2.exe`core::slice::iter::impl$189::for_each(core::slice::iter::IterMut&lt;alloc::vec::Vec&lt;char,alloc::alloc::Global&gt; &gt;, part2::steps::closure_env$0 (1,741 samples, 6.92%)</title><rect x="90.2334%" y="549" width="6.9233%" height="15" fill="rgb(249,42,33)" fg:x="22691" fg:w="1741"/><text x="90.4834%" y="559.50">part2.exe..</text></g><g><title>part2.exe`part2::steps::closure$0(part2::steps::closure_env$0&lt;500&gt;*, alloc::vec::Vec (1,741 samples, 6.92%)</title><rect x="90.2334%" y="533" width="6.9233%" height="15" fill="rgb(242,149,17)" fg:x="22691" fg:w="1741"/><text x="90.4834%" y="543.50">part2.exe..</text></g><g><title>part2.exe`core::ptr::drop_in_place(alloc::vec::Vec (1,738 samples, 6.91%)</title><rect x="90.2454%" y="517" width="6.9114%" height="15" fill="rgb(244,29,21)" fg:x="22694" fg:w="1738"/><text x="90.4954%" y="527.50">part2.exe..</text></g><g><title>part2.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (1,738 samples, 6.91%)</title><rect x="90.2454%" y="501" width="6.9114%" height="15" fill="rgb(220,130,37)" fg:x="22694" fg:w="1738"/><text x="90.4954%" y="511.50">part2.exe..</text></g><g><title>part2.exe`alloc::raw_vec::impl$3::drop(alloc::raw_vec::RawVec (1,738 samples, 6.91%)</title><rect x="90.2454%" y="485" width="6.9114%" height="15" fill="rgb(211,67,2)" fg:x="22694" fg:w="1738"/><text x="90.4954%" y="495.50">part2.exe..</text></g><g><title>part2.exe`alloc::slice::impl$0::repeat&lt;char&gt;(ref$&lt;slice2$ (1,735 samples, 6.90%)</title><rect x="90.2573%" y="469" width="6.8994%" height="15" fill="rgb(235,68,52)" fg:x="22697" fg:w="1735"/><text x="90.5073%" y="479.50">part2.exe..</text></g><g><title>part2.exe`alloc::vec::impl$20::extend(alloc::vec::Vec&lt;char,alloc::alloc::Global&gt;*, ref$&lt;slice2$ (13 samples, 0.05%)</title><rect x="97.1050%" y="453" width="0.0517%" height="15" fill="rgb(246,142,3)" fg:x="24419" fg:w="13"/><text x="97.3550%" y="463.50"></text></g><g><title>part2.exe`alloc::vec::spec_extend::impl$4::spec_extend(alloc::vec::Vec&lt;char,alloc::alloc::Global&gt;*, core::slice::iter::Iter (13 samples, 0.05%)</title><rect x="97.1050%" y="437" width="0.0517%" height="15" fill="rgb(241,25,7)" fg:x="24419" fg:w="13"/><text x="97.3550%" y="447.50"></text></g><g><title>part2.exe`alloc::vec::Vec&lt;char,alloc::alloc::Global&gt;::append_elements(ptr_const$&lt;slice2$ (13 samples, 0.05%)</title><rect x="97.1050%" y="421" width="0.0517%" height="15" fill="rgb(242,119,39)" fg:x="24419" fg:w="13"/><text x="97.3550%" y="431.50"></text></g><g><title>part2.exe`hashbrown::raw::Bucket&lt;tuple$&lt;usize,tuple$&lt;&gt; &gt; &gt;::next_n (40 samples, 0.16%)</title><rect x="98.5843%" y="453" width="0.1591%" height="15" fill="rgb(241,98,45)" fg:x="24791" fg:w="40"/><text x="98.8343%" y="463.50"></text></g><g><title>part2.exe`core::ptr::mut_ptr::impl$0::sub(tuple$&lt;usize,tuple$ (40 samples, 0.16%)</title><rect x="98.5843%" y="437" width="0.1591%" height="15" fill="rgb(254,28,30)" fg:x="24791" fg:w="40"/><text x="98.8343%" y="447.50"></text></g><g><title>part2.exe`core::ptr::mut_ptr::impl$0::offset(tuple$&lt;usize,tuple$ (40 samples, 0.16%)</title><rect x="98.5843%" y="421" width="0.1591%" height="15" fill="rgb(241,142,54)" fg:x="24791" fg:w="40"/><text x="98.8343%" y="431.50"></text></g><g><title>part2.exe`hashbrown::raw::bitmask::BitMask::lowest_set_bit (16 samples, 0.06%)</title><rect x="98.8428%" y="437" width="0.0636%" height="15" fill="rgb(222,85,15)" fg:x="24856" fg:w="16"/><text x="99.0928%" y="447.50"></text></g><g><title>part2.exe`hashbrown::raw::bitmask::impl$3::next (113 samples, 0.45%)</title><rect x="98.7434%" y="453" width="0.4494%" height="15" fill="rgb(210,85,47)" fg:x="24831" fg:w="113"/><text x="98.9934%" y="463.50"></text></g><g><title>part2.exe`hashbrown::raw::bitmask::BitMask::remove_lowest_bit (72 samples, 0.29%)</title><rect x="98.9064%" y="437" width="0.2863%" height="15" fill="rgb(224,206,25)" fg:x="24872" fg:w="72"/><text x="99.1564%" y="447.50"></text></g><g><title>part2.exe`std::collections::hash::set::impl$23::next(std::collections::hash::set::IntoIter (521 samples, 2.07%)</title><rect x="97.1607%" y="549" width="2.0718%" height="15" fill="rgb(243,201,19)" fg:x="24433" fg:w="521"/><text x="97.4107%" y="559.50">p..</text></g><g><title>part2.exe`hashbrown::set::impl$25::next(hashbrown::set::IntoIter (521 samples, 2.07%)</title><rect x="97.1607%" y="533" width="2.0718%" height="15" fill="rgb(236,59,4)" fg:x="24433" fg:w="521"/><text x="97.4107%" y="543.50">p..</text></g><g><title>part2.exe`hashbrown::map::impl$68::next(hashbrown::map::IntoIter&lt;usize,tuple$ (521 samples, 2.07%)</title><rect x="97.1607%" y="517" width="2.0718%" height="15" fill="rgb(254,179,45)" fg:x="24433" fg:w="521"/><text x="97.4107%" y="527.50">p..</text></g><g><title>part2.exe`hashbrown::raw::impl$34::next(hashbrown::raw::RawIntoIter&lt;tuple$&lt;usize,tuple$ (521 samples, 2.07%)</title><rect x="97.1607%" y="501" width="2.0718%" height="15" fill="rgb(226,14,10)" fg:x="24433" fg:w="521"/><text x="97.4107%" y="511.50">p..</text></g><g><title>part2.exe`hashbrown::raw::impl$27::next(hashbrown::raw::RawIter&lt;tuple$&lt;usize,tuple$ (519 samples, 2.06%)</title><rect x="97.1686%" y="485" width="2.0639%" height="15" fill="rgb(244,27,41)" fg:x="24435" fg:w="519"/><text x="97.4186%" y="495.50">p..</text></g><g><title>part2.exe`hashbrown::raw::RawIterRange&lt;tuple$&lt;usize,tuple$&lt;&gt; &gt; &gt;::next_impl (163 samples, 0.65%)</title><rect x="98.5843%" y="469" width="0.6482%" height="15" fill="rgb(235,35,32)" fg:x="24791" fg:w="163"/><text x="98.8343%" y="479.50"></text></g><g><title>part2.exe`hashbrown::raw::sse2::Group::load_aligned (10 samples, 0.04%)</title><rect x="99.1927%" y="453" width="0.0398%" height="15" fill="rgb(218,68,31)" fg:x="24944" fg:w="10"/><text x="99.4427%" y="463.50"></text></g><g><title>part2.exe`hashbrown::raw::sse2::Group::match_empty_or_deleted (10 samples, 0.04%)</title><rect x="99.1927%" y="437" width="0.0398%" height="15" fill="rgb(207,120,37)" fg:x="24944" fg:w="10"/><text x="99.4427%" y="447.50"></text></g><g><title>part2.exe`core::core_arch::x86::sse2::_mm_movemask_epi8 (10 samples, 0.04%)</title><rect x="99.1927%" y="421" width="0.0398%" height="15" fill="rgb(227,98,0)" fg:x="24944" fg:w="10"/><text x="99.4427%" y="431.50"></text></g><g><title>part2.exe`std::sys::windows::stdio::is_console (19 samples, 0.08%)</title><rect x="99.2444%" y="357" width="0.0756%" height="15" fill="rgb(207,7,3)" fg:x="24957" fg:w="19"/><text x="99.4944%" y="367.50"></text></g><g><title>`0x7FFF3606D743 (19 samples, 0.08%)</title><rect x="99.2444%" y="341" width="0.0756%" height="15" fill="rgb(206,98,19)" fg:x="24957" fg:w="19"/><text x="99.4944%" y="351.50"></text></g><g><title>`0x7FFF3606D924 (19 samples, 0.08%)</title><rect x="99.2444%" y="325" width="0.0756%" height="15" fill="rgb(217,5,26)" fg:x="24957" fg:w="19"/><text x="99.4944%" y="335.50"></text></g><g><title>`0x7FFF3606DA19 (19 samples, 0.08%)</title><rect x="99.2444%" y="309" width="0.0756%" height="15" fill="rgb(235,190,38)" fg:x="24957" fg:w="19"/><text x="99.4944%" y="319.50"></text></g><g><title>`0x7FFF38A0F454 (19 samples, 0.08%)</title><rect x="99.2444%" y="293" width="0.0756%" height="15" fill="rgb(247,86,24)" fg:x="24957" fg:w="19"/><text x="99.4944%" y="303.50"></text></g><g><title>part2.exe`core::fmt::num::imp::impl$7::fmt (37 samples, 0.15%)</title><rect x="99.2405%" y="469" width="0.1471%" height="15" fill="rgb(205,101,16)" fg:x="24956" fg:w="37"/><text x="99.4905%" y="479.50"></text></g><g><title>part2.exe`std::io::Write::write_fmt::impl$0::write_str&lt;std::io::stdio::StderrLock&gt; (37 samples, 0.15%)</title><rect x="99.2405%" y="453" width="0.1471%" height="15" fill="rgb(246,168,33)" fg:x="24956" fg:w="37"/><text x="99.4905%" y="463.50"></text></g><g><title>part2.exe`std::io::stdio::impl$19::write_all (37 samples, 0.15%)</title><rect x="99.2405%" y="437" width="0.1471%" height="15" fill="rgb(231,114,1)" fg:x="24956" fg:w="37"/><text x="99.4905%" y="447.50"></text></g><g><title>part2.exe`std::io::stdio::impl$2::write_all (37 samples, 0.15%)</title><rect x="99.2405%" y="421" width="0.1471%" height="15" fill="rgb(207,184,53)" fg:x="24956" fg:w="37"/><text x="99.4905%" y="431.50"></text></g><g><title>part2.exe`std::io::stdio::handle_ebadf (37 samples, 0.15%)</title><rect x="99.2405%" y="405" width="0.1471%" height="15" fill="rgb(224,95,51)" fg:x="24956" fg:w="37"/><text x="99.4905%" y="415.50"></text></g><g><title>part2.exe`std::io::Write::write_all&lt;std::sys::windows::stdio::Stderr&gt; (37 samples, 0.15%)</title><rect x="99.2405%" y="389" width="0.1471%" height="15" fill="rgb(212,188,45)" fg:x="24956" fg:w="37"/><text x="99.4905%" y="399.50"></text></g><g><title>part2.exe`std::sys::windows::stdio::write (37 samples, 0.15%)</title><rect x="99.2405%" y="373" width="0.1471%" height="15" fill="rgb(223,154,38)" fg:x="24956" fg:w="37"/><text x="99.4905%" y="383.50"></text></g><g><title>part2.exe`std::sys::windows::stdio::write_valid_utf8_to_console (17 samples, 0.07%)</title><rect x="99.3200%" y="357" width="0.0676%" height="15" fill="rgb(251,22,52)" fg:x="24976" fg:w="17"/><text x="99.5700%" y="367.50"></text></g><g><title>part2.exe`std::sys::windows::stdio::write_u16s (17 samples, 0.07%)</title><rect x="99.3200%" y="341" width="0.0676%" height="15" fill="rgb(229,209,22)" fg:x="24976" fg:w="17"/><text x="99.5700%" y="351.50"></text></g><g><title>part2.exe`std::sys::windows::cvt (17 samples, 0.07%)</title><rect x="99.3200%" y="325" width="0.0676%" height="15" fill="rgb(234,138,34)" fg:x="24976" fg:w="17"/><text x="99.5700%" y="335.50"></text></g><g><title>part2.exe`std::sys::windows::impl$2::is_zero (17 samples, 0.07%)</title><rect x="99.3200%" y="309" width="0.0676%" height="15" fill="rgb(212,95,11)" fg:x="24976" fg:w="17"/><text x="99.5700%" y="319.50"></text></g><g><title>`0x7FFF3606D64E (17 samples, 0.07%)</title><rect x="99.3200%" y="293" width="0.0676%" height="15" fill="rgb(240,179,47)" fg:x="24976" fg:w="17"/><text x="99.5700%" y="303.50"></text></g><g><title>`0x7FFF3606D6E3 (17 samples, 0.07%)</title><rect x="99.3200%" y="277" width="0.0676%" height="15" fill="rgb(240,163,11)" fg:x="24976" fg:w="17"/><text x="99.5700%" y="287.50"></text></g><g><title>`0x7FFF3606DA19 (17 samples, 0.07%)</title><rect x="99.3200%" y="261" width="0.0676%" height="15" fill="rgb(236,37,12)" fg:x="24976" fg:w="17"/><text x="99.5700%" y="271.50"></text></g><g><title>`0x7FFF38A0F454 (17 samples, 0.07%)</title><rect x="99.3200%" y="245" width="0.0676%" height="15" fill="rgb(232,164,16)" fg:x="24976" fg:w="17"/><text x="99.5700%" y="255.50"></text></g><g><title>`0x7FFF3606DA19 (58 samples, 0.23%)</title><rect x="99.3995%" y="325" width="0.2306%" height="15" fill="rgb(244,205,15)" fg:x="24996" fg:w="58"/><text x="99.6495%" y="335.50"></text></g><g><title>`0x7FFF38A0F454 (58 samples, 0.23%)</title><rect x="99.3995%" y="309" width="0.2306%" height="15" fill="rgb(223,117,47)" fg:x="24996" fg:w="58"/><text x="99.6495%" y="319.50"></text></g><g><title>part2.exe`std::sys::windows::stdio::is_console (62 samples, 0.25%)</title><rect x="99.3916%" y="373" width="0.2466%" height="15" fill="rgb(244,107,35)" fg:x="24994" fg:w="62"/><text x="99.6416%" y="383.50"></text></g><g><title>`0x7FFF3606D743 (61 samples, 0.24%)</title><rect x="99.3956%" y="357" width="0.2426%" height="15" fill="rgb(205,140,8)" fg:x="24995" fg:w="61"/><text x="99.6456%" y="367.50"></text></g><g><title>`0x7FFF3606D924 (60 samples, 0.24%)</title><rect x="99.3995%" y="341" width="0.2386%" height="15" fill="rgb(228,84,46)" fg:x="24996" fg:w="60"/><text x="99.6495%" y="351.50"></text></g><g><title>`0x7FFF3606DA19 (59 samples, 0.23%)</title><rect x="99.6540%" y="277" width="0.2346%" height="15" fill="rgb(254,188,9)" fg:x="25060" fg:w="59"/><text x="99.9040%" y="287.50"></text></g><g><title>`0x7FFF38A0F454 (58 samples, 0.23%)</title><rect x="99.6580%" y="261" width="0.2306%" height="15" fill="rgb(206,112,54)" fg:x="25061" fg:w="58"/><text x="99.9080%" y="271.50"></text></g><g><title>`0x7FFF3606D64E (62 samples, 0.25%)</title><rect x="99.6540%" y="309" width="0.2466%" height="15" fill="rgb(216,84,49)" fg:x="25060" fg:w="62"/><text x="99.9040%" y="319.50"></text></g><g><title>`0x7FFF3606D6E3 (62 samples, 0.25%)</title><rect x="99.6540%" y="293" width="0.2466%" height="15" fill="rgb(214,194,35)" fg:x="25060" fg:w="62"/><text x="99.9040%" y="303.50"></text></g><g><title>part2.exe`std::io::Write::write_fmt (168 samples, 0.67%)</title><rect x="99.2365%" y="501" width="0.6681%" height="15" fill="rgb(249,28,3)" fg:x="24955" fg:w="168"/><text x="99.4865%" y="511.50"></text></g><g><title>part2.exe`core::fmt::write (168 samples, 0.67%)</title><rect x="99.2365%" y="485" width="0.6681%" height="15" fill="rgb(222,56,52)" fg:x="24955" fg:w="168"/><text x="99.4865%" y="495.50"></text></g><g><title>part2.exe`std::io::Write::write_fmt::impl$0::write_str&lt;std::io::stdio::StderrLock&gt; (130 samples, 0.52%)</title><rect x="99.3876%" y="469" width="0.5170%" height="15" fill="rgb(245,217,50)" fg:x="24993" fg:w="130"/><text x="99.6376%" y="479.50"></text></g><g><title>part2.exe`std::io::stdio::impl$19::write_all (130 samples, 0.52%)</title><rect x="99.3876%" y="453" width="0.5170%" height="15" fill="rgb(213,201,24)" fg:x="24993" fg:w="130"/><text x="99.6376%" y="463.50"></text></g><g><title>part2.exe`std::io::stdio::impl$2::write_all (130 samples, 0.52%)</title><rect x="99.3876%" y="437" width="0.5170%" height="15" fill="rgb(248,116,28)" fg:x="24993" fg:w="130"/><text x="99.6376%" y="447.50"></text></g><g><title>part2.exe`std::io::stdio::handle_ebadf (130 samples, 0.52%)</title><rect x="99.3876%" y="421" width="0.5170%" height="15" fill="rgb(219,72,43)" fg:x="24993" fg:w="130"/><text x="99.6376%" y="431.50"></text></g><g><title>part2.exe`std::io::Write::write_all&lt;std::sys::windows::stdio::Stderr&gt; (130 samples, 0.52%)</title><rect x="99.3876%" y="405" width="0.5170%" height="15" fill="rgb(209,138,14)" fg:x="24993" fg:w="130"/><text x="99.6376%" y="415.50"></text></g><g><title>part2.exe`std::sys::windows::stdio::write (130 samples, 0.52%)</title><rect x="99.3876%" y="389" width="0.5170%" height="15" fill="rgb(222,18,33)" fg:x="24993" fg:w="130"/><text x="99.6376%" y="399.50"></text></g><g><title>part2.exe`std::sys::windows::stdio::write_valid_utf8_to_console (67 samples, 0.27%)</title><rect x="99.6381%" y="373" width="0.2664%" height="15" fill="rgb(213,199,7)" fg:x="25056" fg:w="67"/><text x="99.8881%" y="383.50"></text></g><g><title>part2.exe`std::sys::windows::stdio::write_u16s (64 samples, 0.25%)</title><rect x="99.6501%" y="357" width="0.2545%" height="15" fill="rgb(250,110,10)" fg:x="25059" fg:w="64"/><text x="99.9001%" y="367.50"></text></g><g><title>part2.exe`std::sys::windows::cvt (64 samples, 0.25%)</title><rect x="99.6501%" y="341" width="0.2545%" height="15" fill="rgb(248,123,6)" fg:x="25059" fg:w="64"/><text x="99.9001%" y="351.50"></text></g><g><title>part2.exe`std::sys::windows::impl$2::is_zero (64 samples, 0.25%)</title><rect x="99.6501%" y="325" width="0.2545%" height="15" fill="rgb(206,91,31)" fg:x="25059" fg:w="64"/><text x="99.9001%" y="335.50"></text></g><g><title>`0x7FFF389CAA58 (25,125 samples, 99.91%)</title><rect x="0.0000%" y="805" width="99.9125%" height="15" fill="rgb(211,154,13)" fg:x="0" fg:w="25125"/><text x="0.2500%" y="815.50">`0x7FFF389CAA58</text></g><g><title>`0x7FFF3873257D (25,125 samples, 99.91%)</title><rect x="0.0000%" y="789" width="99.9125%" height="15" fill="rgb(225,148,7)" fg:x="0" fg:w="25125"/><text x="0.2500%" y="799.50">`0x7FFF3873257D</text></g><g><title>part2.exe`__scrt_common_main_seh() (25,115 samples, 99.87%)</title><rect x="0.0398%" y="773" width="99.8727%" height="15" fill="rgb(220,160,43)" fg:x="10" fg:w="25115"/><text x="0.2898%" y="783.50">part2.exe`__scrt_common_main_seh()</text></g><g><title>part2.exe`invoke_main() (25,111 samples, 99.86%)</title><rect x="0.0557%" y="757" width="99.8568%" height="15" fill="rgb(213,52,39)" fg:x="14" fg:w="25111"/><text x="0.3057%" y="767.50">part2.exe`invoke_main()</text></g><g><title>part2.exe`main (25,111 samples, 99.86%)</title><rect x="0.0557%" y="741" width="99.8568%" height="15" fill="rgb(243,137,7)" fg:x="14" fg:w="25111"/><text x="0.3057%" y="751.50">part2.exe`main</text></g><g><title>part2.exe`std::rt::lang_start_internal (25,111 samples, 99.86%)</title><rect x="0.0557%" y="725" width="99.8568%" height="15" fill="rgb(230,79,13)" fg:x="14" fg:w="25111"/><text x="0.3057%" y="735.50">part2.exe`std::rt::lang_start_internal</text></g><g><title>part2.exe`std::panic::catch_unwind (25,111 samples, 99.86%)</title><rect x="0.0557%" y="709" width="99.8568%" height="15" fill="rgb(247,105,23)" fg:x="14" fg:w="25111"/><text x="0.3057%" y="719.50">part2.exe`std::panic::catch_unwind</text></g><g><title>part2.exe`std::panicking::try (25,111 samples, 99.86%)</title><rect x="0.0557%" y="693" width="99.8568%" height="15" fill="rgb(223,179,41)" fg:x="14" fg:w="25111"/><text x="0.3057%" y="703.50">part2.exe`std::panicking::try</text></g><g><title>part2.exe`std::panicking::try::do_call (25,111 samples, 99.86%)</title><rect x="0.0557%" y="677" width="99.8568%" height="15" fill="rgb(218,9,34)" fg:x="14" fg:w="25111"/><text x="0.3057%" y="687.50">part2.exe`std::panicking::try::do_call</text></g><g><title>part2.exe`std::rt::lang_start_internal::closure$2 (25,110 samples, 99.85%)</title><rect x="0.0596%" y="661" width="99.8529%" height="15" fill="rgb(222,106,8)" fg:x="15" fg:w="25110"/><text x="0.3096%" y="671.50">part2.exe`std::rt::lang_start_internal::closure$2</text></g><g><title>part2.exe`std::panic::catch_unwind (25,110 samples, 99.85%)</title><rect x="0.0596%" y="645" width="99.8529%" height="15" fill="rgb(211,220,0)" fg:x="15" fg:w="25110"/><text x="0.3096%" y="655.50">part2.exe`std::panic::catch_unwind</text></g><g><title>part2.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$ (25,110 samples, 99.85%)</title><rect x="0.0596%" y="629" width="99.8529%" height="15" fill="rgb(229,52,16)" fg:x="15" fg:w="25110"/><text x="0.3096%" y="639.50">part2.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$</text></g><g><title>part2.exe`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*) (25,110 samples, 99.85%)</title><rect x="0.0596%" y="613" width="99.8529%" height="15" fill="rgb(212,155,18)" fg:x="15" fg:w="25110"/><text x="0.3096%" y="623.50">part2.exe`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*)</text></g><g><title>part2.exe`part2::main (25,110 samples, 99.85%)</title><rect x="0.0596%" y="597" width="99.8529%" height="15" fill="rgb(242,21,14)" fg:x="15" fg:w="25110"/><text x="0.3096%" y="607.50">part2.exe`part2::main</text></g><g><title>part2.exe`part2::part2(ref$ (25,110 samples, 99.85%)</title><rect x="0.0596%" y="581" width="99.8529%" height="15" fill="rgb(222,19,48)" fg:x="15" fg:w="25110"/><text x="0.3096%" y="591.50">part2.exe`part2::part2(ref$</text></g><g><title>part2.exe`part2::steps(ref$ (25,110 samples, 99.85%)</title><rect x="0.0596%" y="565" width="99.8529%" height="15" fill="rgb(232,45,27)" fg:x="15" fg:w="25110"/><text x="0.3096%" y="575.50">part2.exe`part2::steps(ref$</text></g><g><title>part2.exe`std::io::stdio::_eprint (171 samples, 0.68%)</title><rect x="99.2325%" y="549" width="0.6800%" height="15" fill="rgb(249,103,42)" fg:x="24954" fg:w="171"/><text x="99.4825%" y="559.50"></text></g><g><title>part2.exe`std::io::stdio::print_to (171 samples, 0.68%)</title><rect x="99.2325%" y="533" width="0.6800%" height="15" fill="rgb(246,81,33)" fg:x="24954" fg:w="171"/><text x="99.4825%" y="543.50"></text></g><g><title>part2.exe`std::io::stdio::impl$18::write_fmt (171 samples, 0.68%)</title><rect x="99.2325%" y="517" width="0.6800%" height="15" fill="rgb(252,33,42)" fg:x="24954" fg:w="171"/><text x="99.4825%" y="527.50"></text></g><g><title>`0x7FFF389988B6 (3 samples, 0.01%)</title><rect x="99.9244%" y="709" width="0.0119%" height="15" fill="rgb(209,212,41)" fg:x="25128" fg:w="3"/><text x="100.1744%" y="719.50"></text></g><g><title>`0x7FFF3899DDA9 (3 samples, 0.01%)</title><rect x="99.9244%" y="693" width="0.0119%" height="15" fill="rgb(207,154,6)" fg:x="25128" fg:w="3"/><text x="100.1744%" y="703.50"></text></g><g><title>`0x7FFF38A4E5BF (8 samples, 0.03%)</title><rect x="99.9244%" y="757" width="0.0318%" height="15" fill="rgb(223,64,47)" fg:x="25128" fg:w="8"/><text x="100.1744%" y="767.50"></text></g><g><title>`0x7FFF3899A25A (8 samples, 0.03%)</title><rect x="99.9244%" y="741" width="0.0318%" height="15" fill="rgb(211,161,38)" fg:x="25128" fg:w="8"/><text x="100.1744%" y="751.50"></text></g><g><title>`0x7FFF38988CAC (8 samples, 0.03%)</title><rect x="99.9244%" y="725" width="0.0318%" height="15" fill="rgb(219,138,40)" fg:x="25128" fg:w="8"/><text x="100.1744%" y="735.50"></text></g><g><title>`0x7FFF38998940 (4 samples, 0.02%)</title><rect x="99.9404%" y="709" width="0.0159%" height="15" fill="rgb(241,228,46)" fg:x="25132" fg:w="4"/><text x="100.1904%" y="719.50"></text></g><g><title>`0x7FFF3899D62D (4 samples, 0.02%)</title><rect x="99.9404%" y="693" width="0.0159%" height="15" fill="rgb(223,209,38)" fg:x="25132" fg:w="4"/><text x="100.1904%" y="703.50"></text></g><g><title>`0x7FFF389DCE70 (4 samples, 0.02%)</title><rect x="99.9404%" y="677" width="0.0159%" height="15" fill="rgb(236,164,45)" fg:x="25132" fg:w="4"/><text x="100.1904%" y="687.50"></text></g><g><title>`0x7FFF389DCDFE (4 samples, 0.02%)</title><rect x="99.9404%" y="661" width="0.0159%" height="15" fill="rgb(231,15,5)" fg:x="25132" fg:w="4"/><text x="100.1904%" y="671.50"></text></g><g><title>`0x7FFF389DD04D (4 samples, 0.02%)</title><rect x="99.9404%" y="645" width="0.0159%" height="15" fill="rgb(252,35,15)" fg:x="25132" fg:w="4"/><text x="100.1904%" y="655.50"></text></g><g><title>`0x7FFF3899869F (4 samples, 0.02%)</title><rect x="99.9404%" y="629" width="0.0159%" height="15" fill="rgb(248,181,18)" fg:x="25132" fg:w="4"/><text x="100.1904%" y="639.50"></text></g><g><title>`0x7FFF38A4E8EF (4 samples, 0.02%)</title><rect x="99.9642%" y="757" width="0.0159%" height="15" fill="rgb(233,39,42)" fg:x="25138" fg:w="4"/><text x="100.2142%" y="767.50"></text></g><g><title>`0x7FFF389946BB (4 samples, 0.02%)</title><rect x="99.9642%" y="741" width="0.0159%" height="15" fill="rgb(238,110,33)" fg:x="25138" fg:w="4"/><text x="100.2142%" y="751.50"></text></g><g><title>`0x7FFF38994906 (4 samples, 0.02%)</title><rect x="99.9642%" y="725" width="0.0159%" height="15" fill="rgb(233,195,10)" fg:x="25138" fg:w="4"/><text x="100.2142%" y="735.50"></text></g><g><title>`0x7FFF389958C4 (4 samples, 0.02%)</title><rect x="99.9642%" y="709" width="0.0159%" height="15" fill="rgb(254,105,3)" fg:x="25138" fg:w="4"/><text x="100.2142%" y="719.50"></text></g><g><title>`0x7FFF3899CE29 (4 samples, 0.02%)</title><rect x="99.9642%" y="693" width="0.0159%" height="15" fill="rgb(221,225,9)" fg:x="25138" fg:w="4"/><text x="100.2142%" y="703.50"></text></g><g><title>all (25,147 samples, 100%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(224,227,45)" fg:x="0" fg:w="25147"/><text x="0.2500%" y="831.50"></text></g><g><title>`0x7FFF389E3DDE (21 samples, 0.08%)</title><rect x="99.9165%" y="805" width="0.0835%" height="15" fill="rgb(229,198,43)" fg:x="25126" fg:w="21"/><text x="100.1665%" y="815.50"></text></g><g><title>`0x7FFF389E3EB3 (21 samples, 0.08%)</title><rect x="99.9165%" y="789" width="0.0835%" height="15" fill="rgb(206,209,35)" fg:x="25126" fg:w="21"/><text x="100.1665%" y="799.50"></text></g><g><title>`0x7FFF38A3A184 (21 samples, 0.08%)</title><rect x="99.9165%" y="773" width="0.0835%" height="15" fill="rgb(245,195,53)" fg:x="25126" fg:w="21"/><text x="100.1665%" y="783.50"></text></g><g><title>`0x7FFF38A4EA75 (5 samples, 0.02%)</title><rect x="99.9801%" y="757" width="0.0199%" height="15" fill="rgb(240,92,26)" fg:x="25142" fg:w="5"/><text x="100.2301%" y="767.50"></text></g><g><title>`0x7FFF389DCE70 (5 samples, 0.02%)</title><rect x="99.9801%" y="741" width="0.0199%" height="15" fill="rgb(207,40,23)" fg:x="25142" fg:w="5"/><text x="100.2301%" y="751.50"></text></g><g><title>`0x7FFF389DCE70 (3 samples, 0.01%)</title><rect x="99.9881%" y="725" width="0.0119%" height="15" fill="rgb(223,111,35)" fg:x="25144" fg:w="3"/><text x="100.2381%" y="735.50"></text></g><g><title>`0x7FFF389DCDFE (3 samples, 0.01%)</title><rect x="99.9881%" y="709" width="0.0119%" height="15" fill="rgb(229,147,28)" fg:x="25144" fg:w="3"/><text x="100.2381%" y="719.50"></text></g><g><title>`0x7FFF389DD04D (3 samples, 0.01%)</title><rect x="99.9881%" y="693" width="0.0119%" height="15" fill="rgb(211,29,28)" fg:x="25144" fg:w="3"/><text x="100.2381%" y="703.50"></text></g><g><title>`0x7FFF3899869F (3 samples, 0.01%)</title><rect x="99.9881%" y="677" width="0.0119%" height="15" fill="rgb(228,72,33)" fg:x="25144" fg:w="3"/><text x="100.2381%" y="687.50"></text></g></svg></svg>